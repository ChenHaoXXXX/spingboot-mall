2025-06-13 14:13:32 [main] INFO  c.c.springmall.SpringMallApplication - Starting SpringMallApplication using Java 17.0.15 with PID 5324 (C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall\target\classes started by user1 in C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall)
2025-06-13 14:13:32 [main] DEBUG c.c.springmall.SpringMallApplication - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-13 14:13:32 [main] INFO  c.c.springmall.SpringMallApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-13 14:13:33 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-13 14:13:33 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 128 ms. Found 4 JPA repository interfaces.
2025-06-13 14:13:35 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-13 14:13:35 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-13 14:13:35 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-13 14:13:35 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-13 14:13:35 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3262 ms
2025-06-13 14:13:35 [main] DEBUG c.c.s.jwt.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-13 14:13:35 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-13 14:13:36 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@27bb74e1
2025-06-13 14:13:36 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-13 14:13:36 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-13 14:13:36 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.15.Final
2025-06-13 14:13:37 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-13 14:13:37 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-13 14:13:37 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0.22
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-13 14:13:40 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-13 14:13:40 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 14:13:40 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-13 14:13:41 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-13 14:13:41 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name myUserDetailsService
2025-06-13 14:13:42 [main] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-13 14:13:43 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-13 14:13:43 [main] INFO  c.c.springmall.SpringMallApplication - Started SpringMallApplication in 12.655 seconds (process running for 14.302)
2025-06-13 14:14:06 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-06-13 14:14:06 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-06-13 14:14:06 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 14:14:06 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-13 14:14:06 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-13 14:14:12 [main] INFO  c.c.springmall.SpringMallApplication - Starting SpringMallApplication using Java 17.0.15 with PID 5160 (C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall\target\classes started by user1 in C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall)
2025-06-13 14:14:12 [main] DEBUG c.c.springmall.SpringMallApplication - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-13 14:14:12 [main] INFO  c.c.springmall.SpringMallApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-13 14:14:13 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-13 14:14:13 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 126 ms. Found 4 JPA repository interfaces.
2025-06-13 14:14:15 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-13 14:14:15 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-13 14:14:15 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-13 14:14:15 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-13 14:14:15 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2819 ms
2025-06-13 14:14:15 [main] DEBUG c.c.s.jwt.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-13 14:14:15 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-13 14:14:16 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@577f9dfd
2025-06-13 14:14:16 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-13 14:14:16 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-13 14:14:16 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.15.Final
2025-06-13 14:14:16 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-13 14:14:17 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-13 14:14:17 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0.22
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-13 14:14:19 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-13 14:14:19 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 14:14:19 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-13 14:14:20 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-13 14:14:20 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name myUserDetailsService
2025-06-13 14:14:21 [main] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-13 14:14:22 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-13 14:14:22 [main] INFO  c.c.springmall.SpringMallApplication - Started SpringMallApplication in 11.322 seconds (process running for 12.82)
2025-06-13 14:14:41 [http-nio-8080-exec-2] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-13 14:14:41 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-13 14:14:41 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-06-13 14:14:41 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.redirectToProducts() 參數: []
2025-06-13 14:14:41 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.redirectToProducts() 返回值: redirect:/products 執行時間: 0ms
2025-06-13 14:14:41 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 14:14:41 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@6f65547d, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 14:14:41 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1859/0x000001f43bc23130@434df9c5, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 14:14:41 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 16 containing com.chenhao.springmall.model.Product instances 執行時間: 215ms
2025-06-13 14:14:41 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 16 containing com.chenhao.springmall.model.Product instances 執行時間: 223ms
2025-06-13 14:14:41 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 226ms
2025-06-13 14:14:42 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 14:14:42 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 14:14:42 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@221b8cd3 執行時間: 138ms
2025-06-13 14:14:42 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@221b8cd3 執行時間: 140ms
2025-06-13 14:14:42 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 14:14:42 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 14:14:42 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@501ca6d] 執行時間: 140ms
2025-06-13 14:14:42 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@501ca6d] 執行時間: 143ms
2025-06-13 14:14:42 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 14:14:42 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@253ca38a, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 14:14:42 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1859/0x000001f43bc23130@3938fb84, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 14:14:42 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 14ms
2025-06-13 14:14:42 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 14ms
2025-06-13 14:14:42 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=48, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@33c5d892, com.chenhao.springmall.model.Product@37e59b8a, com.chenhao.springmall.model.Product@72a6523c, com.chenhao.springmall.model.Product@3e1ecd3c, com.chenhao.springmall.model.Product@23029325, com.chenhao.springmall.model.Product@38207504, com.chenhao.springmall.model.Product@78d7e78e, com.chenhao.springmall.model.Product@30e8b285, com.chenhao.springmall.model.Product@7c49406, com.chenhao.springmall.model.Product@3cf759af, com.chenhao.springmall.model.Product@7bdb2228, com.chenhao.springmall.model.Product@2ba91418]},[]> 執行時間: 23ms
2025-06-13 14:15:09 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 14:15:09 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 14:15:09 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@1f1e0279 執行時間: 10ms
2025-06-13 14:15:09 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@1f1e0279 執行時間: 11ms
2025-06-13 14:15:09 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 14:15:09 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 14:15:09 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@6947b13e] 執行時間: 3ms
2025-06-13 14:15:09 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@6947b13e] 執行時間: 3ms
2025-06-13 14:15:09 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [FOOD, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=C267ABD76274B8FB71C2EE81135F3D93], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 14:15:09 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@7e1f3827, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 14:15:09 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1859/0x000001f43bc23130@66fbd9a1, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 14:15:09 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 14ms
2025-06-13 14:15:09 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 15ms
2025-06-13 14:15:09 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=47, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@fb0a11f, com.chenhao.springmall.model.Product@2f2f8892, com.chenhao.springmall.model.Product@6801b3a1, com.chenhao.springmall.model.Product@68251ec, com.chenhao.springmall.model.Product@c30a07a, com.chenhao.springmall.model.Product@5f08c276, com.chenhao.springmall.model.Product@3a71fe8d, com.chenhao.springmall.model.Product@2ee8c51e, com.chenhao.springmall.model.Product@27d293c9, com.chenhao.springmall.model.Product@3e50ee37, com.chenhao.springmall.model.Product@b60fae6, com.chenhao.springmall.model.Product@63481ea1]},[]> 執行時間: 16ms
2025-06-13 14:15:14 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 14:15:14 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 14:15:14 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@4ebf2243 執行時間: 7ms
2025-06-13 14:15:14 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@4ebf2243 執行時間: 7ms
2025-06-13 14:15:14 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 14:15:14 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 14:15:14 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@692a6fee] 執行時間: 4ms
2025-06-13 14:15:14 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@692a6fee] 執行時間: 4ms
2025-06-13 14:15:14 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [TOY, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=C267ABD76274B8FB71C2EE81135F3D93], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 14:15:14 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@2ec0d2cb, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 14:15:14 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1859/0x000001f43bc23130@2eb2e874, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 14:15:14 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 6ms
2025-06-13 14:15:14 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 6ms
2025-06-13 14:15:14 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@33ed207e]},[]> 執行時間: 8ms
2025-06-13 14:15:16 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 14:15:16 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 14:15:16 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@7d6f7ea7 執行時間: 7ms
2025-06-13 14:15:16 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@7d6f7ea7 執行時間: 7ms
2025-06-13 14:15:16 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 14:15:16 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 14:15:16 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@232429fc] 執行時間: 2ms
2025-06-13 14:15:16 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@232429fc] 執行時間: 2ms
2025-06-13 14:15:16 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showNewProductPage() 參數: [{}]
2025-06-13 14:15:16 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showNewProductPage() 返回值: product-form 執行時間: 1ms
2025-06-13 14:15:17 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showNewProductPage() 參數: [{}]
2025-06-13 14:15:17 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showNewProductPage() 返回值: product-form 執行時間: 0ms
2025-06-13 14:17:27 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.redirectToProducts() 參數: []
2025-06-13 14:17:27 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.redirectToProducts() 返回值: redirect:/products 執行時間: 0ms
2025-06-13 14:17:27 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 14:17:27 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@225e64b7, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 14:17:27 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1859/0x000001f43bc23130@59fcd6d4, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 14:17:27 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 16 containing com.chenhao.springmall.model.Product instances 執行時間: 20ms
2025-06-13 14:17:27 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 16 containing com.chenhao.springmall.model.Product instances 執行時間: 20ms
2025-06-13 14:17:27 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 21ms
2025-06-13 14:17:27 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 14:17:27 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 14:17:27 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@171fc247 執行時間: 6ms
2025-06-13 14:17:27 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@171fc247 執行時間: 6ms
2025-06-13 14:17:27 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 14:17:27 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 14:17:27 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@76b5c463] 執行時間: 4ms
2025-06-13 14:17:27 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@76b5c463] 執行時間: 5ms
2025-06-13 14:17:27 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=C267ABD76274B8FB71C2EE81135F3D93], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 14:17:27 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@274771dd, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 14:17:27 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1859/0x000001f43bc23130@61e70786, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 14:17:27 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 13ms
2025-06-13 14:17:27 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 14ms
2025-06-13 14:17:27 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=48, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@3136a9d6, com.chenhao.springmall.model.Product@4d9f2d3b, com.chenhao.springmall.model.Product@5fa54355, com.chenhao.springmall.model.Product@465dce4f, com.chenhao.springmall.model.Product@4221a74b, com.chenhao.springmall.model.Product@7663acc1, com.chenhao.springmall.model.Product@3a9e6b3, com.chenhao.springmall.model.Product@2b2e6f3f, com.chenhao.springmall.model.Product@647a8eee, com.chenhao.springmall.model.Product@f942304, com.chenhao.springmall.model.Product@43c4d03b, com.chenhao.springmall.model.Product@1bcb18eb]},[]> 執行時間: 14ms
2025-06-13 14:26:21 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.redirectToProducts() 參數: []
2025-06-13 14:26:21 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.redirectToProducts() 返回值: redirect:/products 執行時間: 0ms
2025-06-13 14:26:21 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 14:26:21 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@736b96d, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 14:26:21 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1859/0x000001f43bc23130@4a259e44, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 14:26:21 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 16 containing com.chenhao.springmall.model.Product instances 執行時間: 24ms
2025-06-13 14:26:21 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 16 containing com.chenhao.springmall.model.Product instances 執行時間: 24ms
2025-06-13 14:26:21 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 26ms
2025-06-13 14:26:21 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 14:26:21 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 14:26:21 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@53a8b0 執行時間: 6ms
2025-06-13 14:26:21 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@53a8b0 執行時間: 6ms
2025-06-13 14:26:21 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 14:26:21 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 14:26:21 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2f6cf56b] 執行時間: 3ms
2025-06-13 14:26:21 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2f6cf56b] 執行時間: 4ms
2025-06-13 14:26:21 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=C267ABD76274B8FB71C2EE81135F3D93], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 14:26:21 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@df60a89, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 14:26:21 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1859/0x000001f43bc23130@4eba22b, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 14:26:21 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 14ms
2025-06-13 14:26:21 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 14ms
2025-06-13 14:26:21 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=48, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@54a179d1, com.chenhao.springmall.model.Product@6d7c6484, com.chenhao.springmall.model.Product@15e5f481, com.chenhao.springmall.model.Product@7bc661d3, com.chenhao.springmall.model.Product@2476f08b, com.chenhao.springmall.model.Product@2a20f8c5, com.chenhao.springmall.model.Product@10db50fc, com.chenhao.springmall.model.Product@585b63cd, com.chenhao.springmall.model.Product@4bba32e5, com.chenhao.springmall.model.Product@66f10d87, com.chenhao.springmall.model.Product@2c67fd15, com.chenhao.springmall.model.Product@2fa1b65f]},[]> 執行時間: 14ms
2025-06-13 14:27:07 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberController.loginPage() 參數: [{}]
2025-06-13 14:27:07 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberController.loginPage() 返回值: login 執行時間: 0ms
2025-06-13 14:27:12 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: AuthController.login() 參數: [LoginRequest(email=test1@com.tw, password=111)]
2025-06-13 14:27:12 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 14:27:12 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 14:27:12 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@37f5003a 執行時間: 9ms
2025-06-13 14:27:12 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@37f5003a 執行時間: 10ms
2025-06-13 14:27:12 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 14:27:12 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 14:27:12 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@15f5096a] 執行時間: 2ms
2025-06-13 14:27:13 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@15f5096a] 執行時間: 3ms
2025-06-13 14:27:13 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 14:27:13 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 14:27:13 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@37f5003a 執行時間: 4ms
2025-06-13 14:27:13 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@37f5003a 執行時間: 4ms
2025-06-13 14:27:13 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 14:27:13 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 14:27:13 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@15f5096a] 執行時間: 2ms
2025-06-13 14:27:13 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@15f5096a] 執行時間: 3ms
2025-06-13 14:27:13 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: AuthController.login() 返回值: <200 OK OK,{token=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0MUBjb20udHciLCJyb2xlcyI6WyJST0xFX0FETUlOIl0sImlhdCI6MTc0OTc5NjAzMywiZXhwIjoxNzQ5ODgyNDMzfQ.vpNNpqtZeyT0Sg7VJi1RwhKXflKtvIK5ncIwqs9Vnwc},[]> 執行時間: 271ms
2025-06-13 14:27:13 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 14:27:13 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@55e0442, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 14:27:13 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1859/0x000001f43bc23130@2a7240a6, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 14:27:13 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 16 containing com.chenhao.springmall.model.Product instances 執行時間: 11ms
2025-06-13 14:27:13 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 16 containing com.chenhao.springmall.model.Product instances 執行時間: 11ms
2025-06-13 14:27:13 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 12ms
2025-06-13 14:27:13 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 14:27:13 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 14:27:13 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@110c3116 執行時間: 6ms
2025-06-13 14:27:13 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@110c3116 執行時間: 6ms
2025-06-13 14:27:13 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 14:27:13 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 14:27:13 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@6093e271] 執行時間: 2ms
2025-06-13 14:27:13 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@6093e271] 執行時間: 2ms
2025-06-13 14:27:13 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=C267ABD76274B8FB71C2EE81135F3D93], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 14:27:13 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@5d76edc0, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 14:27:13 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1859/0x000001f43bc23130@167dad5b, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 14:27:13 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 15ms
2025-06-13 14:27:13 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 17ms
2025-06-13 14:27:13 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=48, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@2e8b091d, com.chenhao.springmall.model.Product@25d81cd9, com.chenhao.springmall.model.Product@14feac2c, com.chenhao.springmall.model.Product@71892cfc, com.chenhao.springmall.model.Product@7bc1031, com.chenhao.springmall.model.Product@6267facb, com.chenhao.springmall.model.Product@319b567, com.chenhao.springmall.model.Product@3b4f9734, com.chenhao.springmall.model.Product@5c9525f4, com.chenhao.springmall.model.Product@1f93d0f, com.chenhao.springmall.model.Product@4f8512da, com.chenhao.springmall.model.Product@8b4da29]},[]> 執行時間: 17ms
2025-06-13 14:48:14 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 14:48:14 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 14:48:14 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@605b7c5 執行時間: 17ms
2025-06-13 14:48:14 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@605b7c5 執行時間: 18ms
2025-06-13 14:48:14 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 14:48:14 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 14:48:14 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@229245dd] 執行時間: 4ms
2025-06-13 14:48:14 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@229245dd] 執行時間: 4ms
2025-06-13 14:48:14 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, 橘子, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=C267ABD76274B8FB71C2EE81135F3D93], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 14:48:14 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@577201df, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 14:48:14 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1859/0x000001f43bc23130@3291b0de, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 14:48:14 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 33ms
2025-06-13 14:48:14 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 33ms
2025-06-13 14:48:14 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@33bc8a9c]},[]> 執行時間: 34ms
2025-06-13 14:48:40 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 14:48:40 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 14:48:40 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@51db2547 執行時間: 9ms
2025-06-13 14:48:40 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@51db2547 執行時間: 9ms
2025-06-13 14:48:40 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 14:48:40 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 14:48:40 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@452254e1] 執行時間: 3ms
2025-06-13 14:48:40 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@452254e1] 執行時間: 3ms
2025-06-13 14:48:40 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=C267ABD76274B8FB71C2EE81135F3D93], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 14:48:40 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@36003b37, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 14:48:40 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1859/0x000001f43bc23130@d29fd66, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 14:48:40 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 10ms
2025-06-13 14:48:40 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 10ms
2025-06-13 14:48:40 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=48, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@488c1426, com.chenhao.springmall.model.Product@17e74d7c, com.chenhao.springmall.model.Product@7ebe5ef2, com.chenhao.springmall.model.Product@4d2a93ad, com.chenhao.springmall.model.Product@652f830a, com.chenhao.springmall.model.Product@488ebe7e, com.chenhao.springmall.model.Product@444b2053, com.chenhao.springmall.model.Product@5d65648c, com.chenhao.springmall.model.Product@44cb9bf9, com.chenhao.springmall.model.Product@790ba050, com.chenhao.springmall.model.Product@645f4e9a, com.chenhao.springmall.model.Product@12e81799]},[]> 執行時間: 13ms
2025-06-13 15:02:30 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-06-13 15:02:30 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-06-13 15:02:30 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 15:02:30 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-13 15:02:30 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-13 15:02:38 [main] INFO  c.c.springmall.SpringMallApplication - Starting SpringMallApplication using Java 17.0.15 with PID 7088 (C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall\target\classes started by user1 in C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall)
2025-06-13 15:02:38 [main] DEBUG c.c.springmall.SpringMallApplication - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-13 15:02:38 [main] INFO  c.c.springmall.SpringMallApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-13 15:02:39 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-13 15:02:39 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 106 ms. Found 4 JPA repository interfaces.
2025-06-13 15:02:41 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-13 15:02:41 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-13 15:02:41 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-13 15:02:41 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-13 15:02:41 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2611 ms
2025-06-13 15:02:41 [main] DEBUG c.c.s.jwt.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-13 15:02:41 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-13 15:02:42 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@65e620b0
2025-06-13 15:02:42 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-13 15:02:42 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-13 15:02:42 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.15.Final
2025-06-13 15:02:42 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-13 15:02:42 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-13 15:02:43 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0.22
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-13 15:02:44 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-13 15:02:44 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 15:02:44 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-13 15:02:45 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-13 15:02:45 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name myUserDetailsService
2025-06-13 15:02:46 [main] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-13 15:02:47 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-13 15:02:47 [main] INFO  c.c.springmall.SpringMallApplication - Started SpringMallApplication in 9.931 seconds (process running for 11.264)
2025-06-13 15:03:49 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-13 15:03:49 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-13 15:03:49 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-06-13 15:03:49 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 15:03:49 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@70bb9968, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:03:49 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1851/0x000001fdb2be2d60@3718f92f, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:03:50 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 16 containing com.chenhao.springmall.model.Product instances 執行時間: 203ms
2025-06-13 15:03:50 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 16 containing com.chenhao.springmall.model.Product instances 執行時間: 212ms
2025-06-13 15:03:50 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 213ms
2025-06-13 15:03:50 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:03:50 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:03:50 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@35725bae 執行時間: 150ms
2025-06-13 15:03:50 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@35725bae 執行時間: 151ms
2025-06-13 15:03:50 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:03:50 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:03:50 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2b7d9fd4] 執行時間: 138ms
2025-06-13 15:03:50 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2b7d9fd4] 執行時間: 139ms
2025-06-13 15:03:50 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:03:50 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@2b337255, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:03:50 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1851/0x000001fdb2be2d60@272432c8, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:03:50 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 14ms
2025-06-13 15:03:50 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 14ms
2025-06-13 15:03:50 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=48, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@75373f2a, com.chenhao.springmall.model.Product@11f55517, com.chenhao.springmall.model.Product@7f3a666b, com.chenhao.springmall.model.Product@7dbb852a, com.chenhao.springmall.model.Product@31392bd8, com.chenhao.springmall.model.Product@a5f9d05, com.chenhao.springmall.model.Product@267aab1b, com.chenhao.springmall.model.Product@749e82b, com.chenhao.springmall.model.Product@7fd674f1, com.chenhao.springmall.model.Product@99779bb, com.chenhao.springmall.model.Product@7a4639e1, com.chenhao.springmall.model.Product@4c53e1b2]},[]> 執行時間: 22ms
2025-06-13 15:04:04 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:04:04 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:04:04 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@4ea2b918 執行時間: 6ms
2025-06-13 15:04:04 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@4ea2b918 執行時間: 6ms
2025-06-13 15:04:04 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:04:04 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:04:04 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5834bfc1] 執行時間: 2ms
2025-06-13 15:04:04 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5834bfc1] 執行時間: 3ms
2025-06-13 15:04:04 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [E_BOOK, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=39F47A722BB220284B388EA8A9F9C038], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:04:04 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@105c4e32, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:04:04 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1851/0x000001fdb2be2d60@6d617e0, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:04:04 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 0 containing UNKNOWN instances 執行時間: 7ms
2025-06-13 15:04:04 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 0 containing UNKNOWN instances 執行時間: 7ms
2025-06-13 15:04:04 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=0, totalPages=0, currentPage=0, products=[]},[]> 執行時間: 9ms
2025-06-13 15:04:05 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:04:05 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:04:05 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@6ed32277 執行時間: 5ms
2025-06-13 15:04:05 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@6ed32277 執行時間: 5ms
2025-06-13 15:04:05 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:04:05 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:04:05 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3b422ff5] 執行時間: 2ms
2025-06-13 15:04:05 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3b422ff5] 執行時間: 2ms
2025-06-13 15:04:05 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [TOY, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=39F47A722BB220284B388EA8A9F9C038], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:04:05 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@22544e4e, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:04:05 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1851/0x000001fdb2be2d60@548eaf96, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:04:05 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:04:05 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:04:05 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@4a062faf]},[]> 執行時間: 6ms
2025-06-13 15:04:06 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:04:06 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:04:06 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@33be2b74 執行時間: 5ms
2025-06-13 15:04:06 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@33be2b74 執行時間: 5ms
2025-06-13 15:04:06 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:04:06 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:04:06 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@7d22361] 執行時間: 2ms
2025-06-13 15:04:06 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@7d22361] 執行時間: 2ms
2025-06-13 15:04:06 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [TOY, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=39F47A722BB220284B388EA8A9F9C038], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:04:06 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@742aeccf, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:04:06 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1851/0x000001fdb2be2d60@7e57dbc3, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:04:06 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:04:06 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 6ms
2025-06-13 15:04:06 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@530ff834]},[]> 執行時間: 6ms
2025-06-13 15:04:07 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:04:07 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:04:07 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@6f65547d 執行時間: 4ms
2025-06-13 15:04:07 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@6f65547d 執行時間: 4ms
2025-06-13 15:04:07 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:04:07 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:04:07 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@42465e4] 執行時間: 2ms
2025-06-13 15:04:07 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@42465e4] 執行時間: 2ms
2025-06-13 15:04:07 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=39F47A722BB220284B388EA8A9F9C038], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:04:07 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@38119b9, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:04:07 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1851/0x000001fdb2be2d60@53253e28, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:04:07 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 10ms
2025-06-13 15:04:07 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 11ms
2025-06-13 15:04:07 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=48, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@2b4f66d4, com.chenhao.springmall.model.Product@3ca69748, com.chenhao.springmall.model.Product@5bc4cbdf, com.chenhao.springmall.model.Product@3a9f538f, com.chenhao.springmall.model.Product@6a36ebce, com.chenhao.springmall.model.Product@62223d17, com.chenhao.springmall.model.Product@1fc588bf, com.chenhao.springmall.model.Product@5f06b3e3, com.chenhao.springmall.model.Product@2334b56, com.chenhao.springmall.model.Product@710a0482, com.chenhao.springmall.model.Product@4239ea6c, com.chenhao.springmall.model.Product@28cad063]},[]> 執行時間: 12ms
2025-06-13 15:04:10 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:04:10 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:04:10 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@286d012b 執行時間: 4ms
2025-06-13 15:04:10 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@286d012b 執行時間: 4ms
2025-06-13 15:04:10 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:04:10 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:04:10 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@45fb97fb] 執行時間: 2ms
2025-06-13 15:04:10 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@45fb97fb] 執行時間: 2ms
2025-06-13 15:04:10 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, 蘋果, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=39F47A722BB220284B388EA8A9F9C038], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:04:10 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@234b869b, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:04:10 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1851/0x000001fdb2be2d60@17a46631, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:04:10 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 2 containing com.chenhao.springmall.model.Product instances 執行時間: 17ms
2025-06-13 15:04:10 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 2 containing com.chenhao.springmall.model.Product instances 執行時間: 18ms
2025-06-13 15:04:10 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=19, totalPages=2, currentPage=0, products=[com.chenhao.springmall.model.Product@3efaa92e, com.chenhao.springmall.model.Product@3f4496d5, com.chenhao.springmall.model.Product@5282bd61, com.chenhao.springmall.model.Product@20181348, com.chenhao.springmall.model.Product@4bc06dbc, com.chenhao.springmall.model.Product@5029b82f, com.chenhao.springmall.model.Product@17077efe, com.chenhao.springmall.model.Product@77e5bd05, com.chenhao.springmall.model.Product@3f8083c8, com.chenhao.springmall.model.Product@22f5acd7, com.chenhao.springmall.model.Product@ea9c6f9, com.chenhao.springmall.model.Product@547e5fbc]},[]> 執行時間: 18ms
2025-06-13 15:04:11 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:04:11 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:04:11 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@59998d2c 執行時間: 4ms
2025-06-13 15:04:11 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@59998d2c 執行時間: 5ms
2025-06-13 15:04:11 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:04:11 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:04:11 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@4ecc6040] 執行時間: 2ms
2025-06-13 15:04:11 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@4ecc6040] 執行時間: 2ms
2025-06-13 15:04:11 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, 蘋果, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=39F47A722BB220284B388EA8A9F9C038], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:04:11 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@4d84a6a6, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:04:11 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1851/0x000001fdb2be2d60@351deea9, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:04:11 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 2 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 15:04:11 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 2 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 15:04:11 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=19, totalPages=2, currentPage=0, products=[com.chenhao.springmall.model.Product@2fb0f1bf, com.chenhao.springmall.model.Product@5e3ec811, com.chenhao.springmall.model.Product@793bc1cd, com.chenhao.springmall.model.Product@2b2442c4, com.chenhao.springmall.model.Product@3b16316, com.chenhao.springmall.model.Product@2b675d31, com.chenhao.springmall.model.Product@c75d439, com.chenhao.springmall.model.Product@5ce9511, com.chenhao.springmall.model.Product@defef6d, com.chenhao.springmall.model.Product@1cf0a534, com.chenhao.springmall.model.Product@3e066e8f, com.chenhao.springmall.model.Product@4f111243]},[]> 執行時間: 10ms
2025-06-13 15:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@1f1e0279 執行時間: 5ms
2025-06-13 15:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@1f1e0279 執行時間: 5ms
2025-06-13 15:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3531a80d] 執行時間: 3ms
2025-06-13 15:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3531a80d] 執行時間: 3ms
2025-06-13 15:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, 蘋果, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=39F47A722BB220284B388EA8A9F9C038], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@48224192, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1851/0x000001fdb2be2d60@d17cc16, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 2 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 15:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 2 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 15:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=19, totalPages=2, currentPage=0, products=[com.chenhao.springmall.model.Product@b60fae6, com.chenhao.springmall.model.Product@63481ea1, com.chenhao.springmall.model.Product@503785da, com.chenhao.springmall.model.Product@69aff8bd, com.chenhao.springmall.model.Product@659498a4, com.chenhao.springmall.model.Product@460a3fa1, com.chenhao.springmall.model.Product@2aff7bef, com.chenhao.springmall.model.Product@3c03141d, com.chenhao.springmall.model.Product@7d93fa81, com.chenhao.springmall.model.Product@6a7325a5, com.chenhao.springmall.model.Product@3b021b07, com.chenhao.springmall.model.Product@1f855386]},[]> 執行時間: 10ms
2025-06-13 15:10:10 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-06-13 15:10:10 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-06-13 15:10:10 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 15:10:10 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-13 15:10:10 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-13 15:10:16 [main] INFO  c.c.springmall.SpringMallApplication - Starting SpringMallApplication using Java 17.0.15 with PID 8916 (C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall\target\classes started by user1 in C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall)
2025-06-13 15:10:16 [main] DEBUG c.c.springmall.SpringMallApplication - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-13 15:10:16 [main] INFO  c.c.springmall.SpringMallApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-13 15:10:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-13 15:10:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 117 ms. Found 4 JPA repository interfaces.
2025-06-13 15:10:18 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-13 15:10:18 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-13 15:10:18 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-13 15:10:18 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-13 15:10:18 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2594 ms
2025-06-13 15:10:18 [main] DEBUG c.c.s.jwt.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-13 15:10:19 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-13 15:10:19 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5d27b4c1
2025-06-13 15:10:19 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-13 15:10:19 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-13 15:10:19 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.15.Final
2025-06-13 15:10:19 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-13 15:10:20 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-13 15:10:20 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0.22
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-13 15:10:22 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-13 15:10:22 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 15:10:22 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-13 15:10:23 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-13 15:10:23 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name myUserDetailsService
2025-06-13 15:10:24 [main] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-13 15:10:25 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-13 15:10:25 [main] INFO  c.c.springmall.SpringMallApplication - Started SpringMallApplication in 10.526 seconds (process running for 11.832)
2025-06-13 15:22:43 [http-nio-8080-exec-2] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-13 15:22:43 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-13 15:22:43 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 6 ms
2025-06-13 15:22:43 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showEditProductPage() 參數: [35, {}]
2025-06-13 15:22:43 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProductById() 參數: [35]
2025-06-13 15:22:43 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findById() 參數: [35]
2025-06-13 15:22:43 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findById() 返回值: Optional[com.chenhao.springmall.model.Product@70e46f0e] 執行時間: 143ms
2025-06-13 15:22:43 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProductById() 返回值: com.chenhao.springmall.model.Product@70e46f0e 執行時間: 149ms
2025-06-13 15:22:43 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showEditProductPage() 返回值: product-update 執行時間: 150ms
2025-06-13 15:33:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 15:33:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@769d1ab7, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:33:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@76b933a4, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:33:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 16 containing com.chenhao.springmall.model.Product instances 執行時間: 144ms
2025-06-13 15:33:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 16 containing com.chenhao.springmall.model.Product instances 執行時間: 151ms
2025-06-13 15:33:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 153ms
2025-06-13 15:33:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:33:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:33:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@47f0d7d2 執行時間: 120ms
2025-06-13 15:33:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@47f0d7d2 執行時間: 122ms
2025-06-13 15:33:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:33:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:33:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@68e06cb] 執行時間: 142ms
2025-06-13 15:33:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@68e06cb] 執行時間: 144ms
2025-06-13 15:33:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:33:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@51f24a84, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:33:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@5cdb2a1b, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:33:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 12ms
2025-06-13 15:33:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 13ms
2025-06-13 15:33:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=48, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@7d8af3c2, com.chenhao.springmall.model.Product@1e59029b, com.chenhao.springmall.model.Product@6abcaeb8, com.chenhao.springmall.model.Product@2788cdb4, com.chenhao.springmall.model.Product@d362e64, com.chenhao.springmall.model.Product@5badb883, com.chenhao.springmall.model.Product@54eb0420, com.chenhao.springmall.model.Product@35ef8664, com.chenhao.springmall.model.Product@916dbb3, com.chenhao.springmall.model.Product@3fc913b2, com.chenhao.springmall.model.Product@456e217f, com.chenhao.springmall.model.Product@32cdeee3]},[]> 執行時間: 16ms
2025-06-13 15:33:28 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showEditProductPage() 參數: [1, {}]
2025-06-13 15:33:28 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProductById() 參數: [1]
2025-06-13 15:33:28 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findById() 參數: [1]
2025-06-13 15:33:28 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findById() 返回值: Optional[com.chenhao.springmall.model.Product@c6ef35b] 執行時間: 7ms
2025-06-13 15:33:28 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProductById() 返回值: com.chenhao.springmall.model.Product@c6ef35b 執行時間: 9ms
2025-06-13 15:33:28 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showEditProductPage() 返回值: product-update 執行時間: 9ms
2025-06-13 15:34:25 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.updateProduct() 參數: [1, com.chenhao.springmall.dto.ProductRequest@743b96b0]
2025-06-13 15:34:25 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.updateProduct() 參數: [1, com.chenhao.springmall.dto.ProductRequest@743b96b0]
2025-06-13 15:34:25 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findById() 參數: [1]
2025-06-13 15:34:25 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findById() 返回值: Optional[com.chenhao.springmall.model.Product@7b0ac223] 執行時間: 3ms
2025-06-13 15:34:25 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.save() 參數: [com.chenhao.springmall.model.Product@7b0ac223]
2025-06-13 15:34:25 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.save() 返回值: com.chenhao.springmall.model.Product@7b0ac223 執行時間: 10ms
2025-06-13 15:34:25 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.updateProduct() 返回值: com.chenhao.springmall.model.Product@7b0ac223 執行時間: 19ms
2025-06-13 15:34:25 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.updateProduct() 返回值: <200 OK OK,com.chenhao.springmall.model.Product@7b0ac223,[]> 執行時間: 97ms
2025-06-13 15:34:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 15:34:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@20f708a1, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:34:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@34b5745f, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:34:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 16 containing com.chenhao.springmall.model.Product instances 執行時間: 14ms
2025-06-13 15:34:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 16 containing com.chenhao.springmall.model.Product instances 執行時間: 16ms
2025-06-13 15:34:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 16ms
2025-06-13 15:34:27 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:34:27 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:34:27 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@573c3d38 執行時間: 13ms
2025-06-13 15:34:27 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@573c3d38 執行時間: 13ms
2025-06-13 15:34:27 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:34:27 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:34:27 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@459f3ac6] 執行時間: 5ms
2025-06-13 15:34:27 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@459f3ac6] 執行時間: 5ms
2025-06-13 15:34:27 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:34:27 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@27e77a35, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:34:27 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@71171f8a, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:34:27 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 11ms
2025-06-13 15:34:27 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 11ms
2025-06-13 15:34:27 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=48, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@16572bbd, com.chenhao.springmall.model.Product@4edcfce8, com.chenhao.springmall.model.Product@18aa99dc, com.chenhao.springmall.model.Product@7af2abb5, com.chenhao.springmall.model.Product@55577d95, com.chenhao.springmall.model.Product@7c45f06b, com.chenhao.springmall.model.Product@306de246, com.chenhao.springmall.model.Product@5fad48fd, com.chenhao.springmall.model.Product@31f82d48, com.chenhao.springmall.model.Product@626d55b4, com.chenhao.springmall.model.Product@3d4de46d, com.chenhao.springmall.model.Product@892b999]},[]> 執行時間: 11ms
2025-06-13 15:35:45 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:35:45 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:35:45 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@ec7c9c7 執行時間: 11ms
2025-06-13 15:35:45 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@ec7c9c7 執行時間: 11ms
2025-06-13 15:35:45 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:35:45 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:35:45 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@29a510a1] 執行時間: 3ms
2025-06-13 15:35:45 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@29a510a1] 執行時間: 3ms
2025-06-13 15:35:45 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showNewProductPage() 參數: [{}]
2025-06-13 15:35:45 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showNewProductPage() 返回值: product-form 執行時間: 1ms
2025-06-13 15:35:45 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showNewProductPage() 參數: [{}]
2025-06-13 15:35:45 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showNewProductPage() 返回值: product-form 執行時間: 0ms
2025-06-13 15:36:44 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.createProduct() 參數: [com.chenhao.springmall.dto.ProductRequest@2ba983de]
2025-06-13 15:36:44 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.createProduct() 參數: [com.chenhao.springmall.dto.ProductRequest@2ba983de]
2025-06-13 15:36:44 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.save() 參數: [com.chenhao.springmall.model.Product@6bfe312e]
2025-06-13 15:36:44 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.save() 返回值: com.chenhao.springmall.model.Product@6bfe312e 執行時間: 41ms
2025-06-13 15:36:44 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.createProduct() 返回值: 58 執行時間: 41ms
2025-06-13 15:36:44 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProductById() 參數: [58]
2025-06-13 15:36:44 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findById() 參數: [58]
2025-06-13 15:36:44 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findById() 返回值: Optional[com.chenhao.springmall.model.Product@6bfe312e] 執行時間: 4ms
2025-06-13 15:36:44 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProductById() 返回值: com.chenhao.springmall.model.Product@6bfe312e 執行時間: 5ms
2025-06-13 15:36:44 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.createProduct() 返回值: <201 CREATED Created,com.chenhao.springmall.model.Product@6bfe312e,[]> 執行時間: 94ms
2025-06-13 15:36:46 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 15:36:46 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@6947b13e, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:36:46 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@3531a80d, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:36:46 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 16ms
2025-06-13 15:36:46 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 17ms
2025-06-13 15:36:46 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 18ms
2025-06-13 15:36:46 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:36:46 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:36:46 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@3c691136 執行時間: 5ms
2025-06-13 15:36:46 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@3c691136 執行時間: 5ms
2025-06-13 15:36:46 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:36:46 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:36:46 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@b12f7cc] 執行時間: 5ms
2025-06-13 15:36:46 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@b12f7cc] 執行時間: 5ms
2025-06-13 15:36:46 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:36:46 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@2338bae0, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:36:46 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@61425ac, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:36:46 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 11ms
2025-06-13 15:36:46 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 11ms
2025-06-13 15:36:46 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=49, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@5544c4fb, com.chenhao.springmall.model.Product@2e26d559, com.chenhao.springmall.model.Product@1d2a502e, com.chenhao.springmall.model.Product@9517e4b, com.chenhao.springmall.model.Product@7ac10086, com.chenhao.springmall.model.Product@62558e9a, com.chenhao.springmall.model.Product@2db119de, com.chenhao.springmall.model.Product@2f908905, com.chenhao.springmall.model.Product@5da77941, com.chenhao.springmall.model.Product@13c81d31, com.chenhao.springmall.model.Product@3692997f, com.chenhao.springmall.model.Product@1de1f609]},[]> 執行時間: 12ms
2025-06-13 15:38:35 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:35 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:35 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@4e15a027 執行時間: 13ms
2025-06-13 15:38:35 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@4e15a027 執行時間: 13ms
2025-06-13 15:38:35 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:38:35 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:38:35 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2fe0ff45] 執行時間: 4ms
2025-06-13 15:38:35 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2fe0ff45] 執行時間: 5ms
2025-06-13 15:38:35 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 4, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:38:35 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@260c7151, Page request [number: 4, size 12, sort: UNSORTED]]
2025-06-13 15:38:35 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@799fd329, Page request [number: 4, size 12, sort: UNSORTED]]
2025-06-13 15:38:35 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 5 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 7ms
2025-06-13 15:38:35 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 5 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 15:38:35 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=49, totalPages=5, currentPage=4, products=[com.chenhao.springmall.model.Product@3411e6e7]},[]> 執行時間: 9ms
2025-06-13 15:38:36 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:36 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:36 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@34f89343 執行時間: 4ms
2025-06-13 15:38:36 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@34f89343 執行時間: 4ms
2025-06-13 15:38:36 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:38:36 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:38:36 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@60348c6e] 執行時間: 1ms
2025-06-13 15:38:36 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@60348c6e] 執行時間: 2ms
2025-06-13 15:38:36 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 3, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:38:36 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@fa7be64, Page request [number: 3, size 12, sort: UNSORTED]]
2025-06-13 15:38:36 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@522d2f16, Page request [number: 3, size 12, sort: UNSORTED]]
2025-06-13 15:38:36 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 4 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 15:38:36 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 4 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 15:38:36 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=49, totalPages=5, currentPage=3, products=[com.chenhao.springmall.model.Product@530ff834, com.chenhao.springmall.model.Product@471dfe4d, com.chenhao.springmall.model.Product@75614af8, com.chenhao.springmall.model.Product@15601353, com.chenhao.springmall.model.Product@39828793, com.chenhao.springmall.model.Product@11c5f978, com.chenhao.springmall.model.Product@6e0c5732, com.chenhao.springmall.model.Product@7be32b2b, com.chenhao.springmall.model.Product@567085db, com.chenhao.springmall.model.Product@68c0b854, com.chenhao.springmall.model.Product@6479d7b9, com.chenhao.springmall.model.Product@6a1026e]},[]> 執行時間: 9ms
2025-06-13 15:38:40 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:40 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:40 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@6f65547d 執行時間: 5ms
2025-06-13 15:38:40 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@6f65547d 執行時間: 5ms
2025-06-13 15:38:40 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:38:40 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:38:40 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@42465e4] 執行時間: 2ms
2025-06-13 15:38:40 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@42465e4] 執行時間: 2ms
2025-06-13 15:38:40 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [FOOD, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:38:40 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@254f5e26, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:40 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@33510c6f, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:40 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 11ms
2025-06-13 15:38:40 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 12ms
2025-06-13 15:38:40 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=47, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@28cad063, com.chenhao.springmall.model.Product@303b47d7, com.chenhao.springmall.model.Product@11b46b46, com.chenhao.springmall.model.Product@1c538996, com.chenhao.springmall.model.Product@62641bb7, com.chenhao.springmall.model.Product@80bfdd3, com.chenhao.springmall.model.Product@3a5759cf, com.chenhao.springmall.model.Product@3a48782a, com.chenhao.springmall.model.Product@78336577, com.chenhao.springmall.model.Product@2f01fac7, com.chenhao.springmall.model.Product@2f1847c9, com.chenhao.springmall.model.Product@56e8f328]},[]> 執行時間: 12ms
2025-06-13 15:38:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@15296de1 執行時間: 4ms
2025-06-13 15:38:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@15296de1 執行時間: 5ms
2025-06-13 15:38:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:38:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:38:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5029b82f] 執行時間: 3ms
2025-06-13 15:38:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5029b82f] 執行時間: 3ms
2025-06-13 15:38:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [TOY, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:38:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@7d484fee, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@647a1c3, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:38:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:38:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@60631967]},[]> 執行時間: 6ms
2025-06-13 15:38:43 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:43 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:43 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@6f748fde 執行時間: 4ms
2025-06-13 15:38:43 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@6f748fde 執行時間: 5ms
2025-06-13 15:38:43 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:38:43 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:38:43 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@1cb6484e] 執行時間: 2ms
2025-06-13 15:38:43 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@1cb6484e] 執行時間: 2ms
2025-06-13 15:38:43 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [E_BOOK, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:38:43 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@3cb18724, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:43 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@3bcba18d, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:43 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:38:43 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:38:43 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@457481f2]},[]> 執行時間: 6ms
2025-06-13 15:38:43 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:43 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:43 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@6801b3a1 執行時間: 3ms
2025-06-13 15:38:43 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@6801b3a1 執行時間: 4ms
2025-06-13 15:38:43 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:38:43 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:38:43 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@b60fae6] 執行時間: 1ms
2025-06-13 15:38:43 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@b60fae6] 執行時間: 1ms
2025-06-13 15:38:43 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [TOY, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:38:43 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@5f8c395a, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:43 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@d31800c, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:43 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:38:43 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 6ms
2025-06-13 15:38:43 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@24bf56a6]},[]> 執行時間: 6ms
2025-06-13 15:38:44 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:44 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:44 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@2aeae03e 執行時間: 4ms
2025-06-13 15:38:44 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@2aeae03e 執行時間: 4ms
2025-06-13 15:38:44 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:38:44 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:38:44 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2b96354d] 執行時間: 1ms
2025-06-13 15:38:44 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2b96354d] 執行時間: 2ms
2025-06-13 15:38:44 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [TOY, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:38:44 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@5b12c6fb, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:44 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@27d57b26, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:44 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:38:44 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:38:44 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@22a0cd55]},[]> 執行時間: 5ms
2025-06-13 15:38:44 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:44 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:44 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@11a5395c 執行時間: 3ms
2025-06-13 15:38:44 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@11a5395c 執行時間: 5ms
2025-06-13 15:38:44 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:38:44 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:38:44 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@766bfce6] 執行時間: 2ms
2025-06-13 15:38:44 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@766bfce6] 執行時間: 2ms
2025-06-13 15:38:44 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [TOY, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:38:44 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@79647859, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:44 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@22544e4e, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:44 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:38:44 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:38:44 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@7c6f58fa]},[]> 執行時間: 5ms
2025-06-13 15:38:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@67210e54 執行時間: 5ms
2025-06-13 15:38:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@67210e54 執行時間: 5ms
2025-06-13 15:38:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:38:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:38:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2b488019] 執行時間: 2ms
2025-06-13 15:38:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2b488019] 執行時間: 2ms
2025-06-13 15:38:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [FOOD, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:38:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@50262be4, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@75794854, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 7ms
2025-06-13 15:38:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 15:38:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=47, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@121d75b1, com.chenhao.springmall.model.Product@5093014c, com.chenhao.springmall.model.Product@26b1dd00, com.chenhao.springmall.model.Product@17a0f95f, com.chenhao.springmall.model.Product@6ee9b6e7, com.chenhao.springmall.model.Product@26b85317, com.chenhao.springmall.model.Product@ec9d31d, com.chenhao.springmall.model.Product@1eb3b99a, com.chenhao.springmall.model.Product@3d4e6a25, com.chenhao.springmall.model.Product@598ab670, com.chenhao.springmall.model.Product@199bd767, com.chenhao.springmall.model.Product@1a67c2a7]},[]> 執行時間: 9ms
2025-06-13 15:38:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@28fd2841 執行時間: 4ms
2025-06-13 15:38:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@28fd2841 執行時間: 4ms
2025-06-13 15:38:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:38:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:38:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@36d124bd] 執行時間: 1ms
2025-06-13 15:38:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@36d124bd] 執行時間: 2ms
2025-06-13 15:38:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:38:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@14d3db6c, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@45013427, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 15:38:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 10ms
2025-06-13 15:38:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=49, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@2bcbe00, com.chenhao.springmall.model.Product@7800575a, com.chenhao.springmall.model.Product@37e34f7b, com.chenhao.springmall.model.Product@219eeb72, com.chenhao.springmall.model.Product@46b50dff, com.chenhao.springmall.model.Product@3cf528f4, com.chenhao.springmall.model.Product@11c02086, com.chenhao.springmall.model.Product@47538cb7, com.chenhao.springmall.model.Product@29e7bb57, com.chenhao.springmall.model.Product@3cc09417, com.chenhao.springmall.model.Product@2c944719, com.chenhao.springmall.model.Product@77f95008]},[]> 執行時間: 10ms
2025-06-13 15:38:47 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:47 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:47 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@7a7c4ee 執行時間: 4ms
2025-06-13 15:38:47 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@7a7c4ee 執行時間: 4ms
2025-06-13 15:38:47 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:38:47 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:38:47 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@4d6ab2e5] 執行時間: 2ms
2025-06-13 15:38:47 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@4d6ab2e5] 執行時間: 2ms
2025-06-13 15:38:47 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [FOOD, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:38:47 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@e5b588e, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:47 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@64c9400a, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:47 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 15:38:47 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 15:38:47 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=47, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@7678a60e, com.chenhao.springmall.model.Product@738cbb46, com.chenhao.springmall.model.Product@1c8fe4da, com.chenhao.springmall.model.Product@1af9064f, com.chenhao.springmall.model.Product@29829bc8, com.chenhao.springmall.model.Product@3fc24335, com.chenhao.springmall.model.Product@5c08d923, com.chenhao.springmall.model.Product@e116793, com.chenhao.springmall.model.Product@3370f142, com.chenhao.springmall.model.Product@1e86d7f2, com.chenhao.springmall.model.Product@45dc4c0, com.chenhao.springmall.model.Product@1750627]},[]> 執行時間: 8ms
2025-06-13 15:38:47 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:47 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:47 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@75749ec5 執行時間: 5ms
2025-06-13 15:38:47 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@75749ec5 執行時間: 5ms
2025-06-13 15:38:47 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:38:47 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:38:47 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2180630b] 執行時間: 3ms
2025-06-13 15:38:47 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2180630b] 執行時間: 4ms
2025-06-13 15:38:47 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [TOY, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:38:47 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@45b2be17, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:47 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@7fae03c2, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:47 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:38:47 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:38:47 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@ee96c69]},[]> 執行時間: 5ms
2025-06-13 15:38:48 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:48 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:48 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@41231e44 執行時間: 4ms
2025-06-13 15:38:48 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@41231e44 執行時間: 4ms
2025-06-13 15:38:48 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:38:48 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:38:48 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@38f4c728] 執行時間: 2ms
2025-06-13 15:38:48 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@38f4c728] 執行時間: 2ms
2025-06-13 15:38:48 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [E_BOOK, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:38:48 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@6c7ac419, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:48 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@4cc5de0c, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:48 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:38:48 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:38:48 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@5014600c]},[]> 執行時間: 5ms
2025-06-13 15:38:49 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:49 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:49 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@28375917 執行時間: 4ms
2025-06-13 15:38:49 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@28375917 執行時間: 4ms
2025-06-13 15:38:49 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:38:49 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:38:49 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@21da0077] 執行時間: 2ms
2025-06-13 15:38:49 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@21da0077] 執行時間: 2ms
2025-06-13 15:38:49 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [FOOD, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:38:49 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@3672b090, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:49 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@10ecabc3, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:38:49 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 7ms
2025-06-13 15:38:49 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 15:38:49 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=47, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@1f947cd, com.chenhao.springmall.model.Product@7343d455, com.chenhao.springmall.model.Product@7ecacae7, com.chenhao.springmall.model.Product@590b340e, com.chenhao.springmall.model.Product@1207d7cd, com.chenhao.springmall.model.Product@7f0b58a4, com.chenhao.springmall.model.Product@57be3850, com.chenhao.springmall.model.Product@5715dded, com.chenhao.springmall.model.Product@7b00d17d, com.chenhao.springmall.model.Product@5eeb78c1, com.chenhao.springmall.model.Product@7831a7f4, com.chenhao.springmall.model.Product@132e7aa]},[]> 執行時間: 9ms
2025-06-13 15:38:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:38:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@40b07843 執行時間: 5ms
2025-06-13 15:38:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@40b07843 執行時間: 5ms
2025-06-13 15:38:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:38:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:38:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3076780a] 執行時間: 2ms
2025-06-13 15:38:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3076780a] 執行時間: 2ms
2025-06-13 15:38:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [FOOD, null, 3, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:38:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@6ccb3256, Page request [number: 3, size 12, sort: UNSORTED]]
2025-06-13 15:38:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@5d852cf3, Page request [number: 3, size 12, sort: UNSORTED]]
2025-06-13 15:38:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 4 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:38:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 4 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:38:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=47, totalPages=4, currentPage=3, products=[com.chenhao.springmall.model.Product@4af1f626, com.chenhao.springmall.model.Product@41bb7a63, com.chenhao.springmall.model.Product@66a59f79, com.chenhao.springmall.model.Product@4e142bb3, com.chenhao.springmall.model.Product@b11a491, com.chenhao.springmall.model.Product@1163aff2, com.chenhao.springmall.model.Product@5b77a4f0, com.chenhao.springmall.model.Product@34d1559e, com.chenhao.springmall.model.Product@32625ab9, com.chenhao.springmall.model.Product@3e727f38, com.chenhao.springmall.model.Product@58c40c22]},[]> 執行時間: 6ms
2025-06-13 15:39:01 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:01 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:01 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@565abd31 執行時間: 6ms
2025-06-13 15:39:01 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@565abd31 執行時間: 6ms
2025-06-13 15:39:01 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:39:01 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:39:01 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@218286d7] 執行時間: 2ms
2025-06-13 15:39:01 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@218286d7] 執行時間: 2ms
2025-06-13 15:39:01 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [FOOD, 哈利波特, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:39:01 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@9cf4d9e, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:01 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@569f09e3, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:01 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 7ms
2025-06-13 15:39:01 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 7ms
2025-06-13 15:39:01 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=47, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@de5d768, com.chenhao.springmall.model.Product@18bbc0ba, com.chenhao.springmall.model.Product@46973548, com.chenhao.springmall.model.Product@7adeebdf, com.chenhao.springmall.model.Product@59a33d7b, com.chenhao.springmall.model.Product@1f5b88e5, com.chenhao.springmall.model.Product@6099d333, com.chenhao.springmall.model.Product@6d144cec, com.chenhao.springmall.model.Product@2d9cecd0, com.chenhao.springmall.model.Product@6ec34526, com.chenhao.springmall.model.Product@406d1386, com.chenhao.springmall.model.Product@fd1444b]},[]> 執行時間: 8ms
2025-06-13 15:39:06 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:06 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:06 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@2930c4b9 執行時間: 4ms
2025-06-13 15:39:06 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@2930c4b9 執行時間: 4ms
2025-06-13 15:39:06 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:39:06 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:39:06 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@78953d6b] 執行時間: 2ms
2025-06-13 15:39:06 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@78953d6b] 執行時間: 3ms
2025-06-13 15:39:06 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [FOOD, 哈利波特, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:39:06 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@306f5c11, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:06 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@155d88ec, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:06 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 6ms
2025-06-13 15:39:06 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 7ms
2025-06-13 15:39:06 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=47, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@1763222f, com.chenhao.springmall.model.Product@3bd11e2c, com.chenhao.springmall.model.Product@6af943e8, com.chenhao.springmall.model.Product@5219d320, com.chenhao.springmall.model.Product@5ce5e116, com.chenhao.springmall.model.Product@6f76b4d8, com.chenhao.springmall.model.Product@4fb04cdd, com.chenhao.springmall.model.Product@532c06d8, com.chenhao.springmall.model.Product@20b2a0fa, com.chenhao.springmall.model.Product@7a381040, com.chenhao.springmall.model.Product@37a37d7e, com.chenhao.springmall.model.Product@40ab794]},[]> 執行時間: 7ms
2025-06-13 15:39:06 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:06 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:06 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@3dfa3a9f 執行時間: 3ms
2025-06-13 15:39:06 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@3dfa3a9f 執行時間: 4ms
2025-06-13 15:39:06 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:39:06 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:39:06 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@1fe4f295] 執行時間: 2ms
2025-06-13 15:39:06 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@1fe4f295] 執行時間: 2ms
2025-06-13 15:39:06 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [FOOD, 哈利波特, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:39:06 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@51434e31, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:06 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@1a046890, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:06 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 15:39:06 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 15:39:06 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=47, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@7d1c5ce8, com.chenhao.springmall.model.Product@744bc6a8, com.chenhao.springmall.model.Product@2d428b77, com.chenhao.springmall.model.Product@c6f842, com.chenhao.springmall.model.Product@1f220fae, com.chenhao.springmall.model.Product@3576e464, com.chenhao.springmall.model.Product@cd6d88e, com.chenhao.springmall.model.Product@3b6535be, com.chenhao.springmall.model.Product@34b50203, com.chenhao.springmall.model.Product@36e29535, com.chenhao.springmall.model.Product@c4a29cf, com.chenhao.springmall.model.Product@1e10353d]},[]> 執行時間: 8ms
2025-06-13 15:39:06 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:06 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:06 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@3cf27fe1 執行時間: 5ms
2025-06-13 15:39:06 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@3cf27fe1 執行時間: 5ms
2025-06-13 15:39:06 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:39:06 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:39:06 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@7cac9a80] 執行時間: 2ms
2025-06-13 15:39:06 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@7cac9a80] 執行時間: 2ms
2025-06-13 15:39:06 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [E_BOOK, 哈利波特, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:39:06 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@8bfd197, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:06 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@5c6e22f7, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:06 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:39:06 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:39:06 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@2a9ad6b0]},[]> 執行時間: 5ms
2025-06-13 15:39:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@3fb505df 執行時間: 5ms
2025-06-13 15:39:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@3fb505df 執行時間: 5ms
2025-06-13 15:39:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:39:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:39:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3a3f88a7] 執行時間: 2ms
2025-06-13 15:39:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3a3f88a7] 執行時間: 3ms
2025-06-13 15:39:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, 哈利波特, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:39:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@571c2222, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@23fa80c6, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 19ms
2025-06-13 15:39:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 19ms
2025-06-13 15:39:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@57ad48d7]},[]> 執行時間: 20ms
2025-06-13 15:39:10 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:10 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:10 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@64bbdaeb 執行時間: 4ms
2025-06-13 15:39:10 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@64bbdaeb 執行時間: 4ms
2025-06-13 15:39:10 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:39:10 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:39:10 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@206324ab] 執行時間: 2ms
2025-06-13 15:39:10 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@206324ab] 執行時間: 2ms
2025-06-13 15:39:10 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, 哈利, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:39:10 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@62859b3f, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:10 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@27e75d05, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:10 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:39:10 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:39:10 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@10097f6f]},[]> 執行時間: 5ms
2025-06-13 15:39:10 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:10 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:10 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@2055829a 執行時間: 3ms
2025-06-13 15:39:10 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@2055829a 執行時間: 3ms
2025-06-13 15:39:10 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:39:10 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:39:10 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@723fea] 執行時間: 1ms
2025-06-13 15:39:10 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@723fea] 執行時間: 3ms
2025-06-13 15:39:10 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, 哈利, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:39:10 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@7bbfaa62, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:10 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@1c2599bb, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:10 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:39:10 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:39:10 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@5d4365c0]},[]> 執行時間: 5ms
2025-06-13 15:39:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@5f474f0b 執行時間: 3ms
2025-06-13 15:39:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@5f474f0b 執行時間: 4ms
2025-06-13 15:39:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:39:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:39:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@1719d045] 執行時間: 2ms
2025-06-13 15:39:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@1719d045] 執行時間: 2ms
2025-06-13 15:39:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:39:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@5747016e, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@3d593e41, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 15:39:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 15:39:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=49, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@1ef15e17, com.chenhao.springmall.model.Product@6449e8bd, com.chenhao.springmall.model.Product@1748dfb0, com.chenhao.springmall.model.Product@32aa5d7d, com.chenhao.springmall.model.Product@26bfbcd9, com.chenhao.springmall.model.Product@d18b4b3, com.chenhao.springmall.model.Product@5cfc4fff, com.chenhao.springmall.model.Product@3cdda0a8, com.chenhao.springmall.model.Product@675f9a9e, com.chenhao.springmall.model.Product@2faa07ea, com.chenhao.springmall.model.Product@11173657, com.chenhao.springmall.model.Product@409e0c3d]},[]> 執行時間: 10ms
2025-06-13 15:39:15 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:15 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:15 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@6a48fbcd 執行時間: 4ms
2025-06-13 15:39:15 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@6a48fbcd 執行時間: 4ms
2025-06-13 15:39:15 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:39:15 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:39:15 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@d0797c] 執行時間: 2ms
2025-06-13 15:39:15 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@d0797c] 執行時間: 2ms
2025-06-13 15:39:15 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, 橘子, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:39:15 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@69c2139d, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:15 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@554adc0a, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:15 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:39:15 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:39:15 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@1af3028f]},[]> 執行時間: 5ms
2025-06-13 15:39:17 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:17 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:17 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@4d08d97e 執行時間: 4ms
2025-06-13 15:39:17 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@4d08d97e 執行時間: 4ms
2025-06-13 15:39:17 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:39:17 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:39:17 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@27e4f57d] 執行時間: 2ms
2025-06-13 15:39:17 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@27e4f57d] 執行時間: 2ms
2025-06-13 15:39:17 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, 哈利, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:39:17 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@23e72961, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:17 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@4dc6b222, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:17 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:39:17 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:39:17 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@777439de]},[]> 執行時間: 5ms
2025-06-13 15:39:22 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:22 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:22 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@1435554b 執行時間: 4ms
2025-06-13 15:39:22 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@1435554b 執行時間: 4ms
2025-06-13 15:39:22 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:39:22 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:39:22 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@b8b233e] 執行時間: 2ms
2025-06-13 15:39:22 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@b8b233e] 執行時間: 2ms
2025-06-13 15:39:22 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:39:22 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@6a86cbae, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:22 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@3f64046e, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:22 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 6ms
2025-06-13 15:39:22 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 6ms
2025-06-13 15:39:22 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=49, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@589436, com.chenhao.springmall.model.Product@18f41528, com.chenhao.springmall.model.Product@306270d, com.chenhao.springmall.model.Product@62789708, com.chenhao.springmall.model.Product@26c54655, com.chenhao.springmall.model.Product@1ea04af0, com.chenhao.springmall.model.Product@2cac3866, com.chenhao.springmall.model.Product@aca2a2c, com.chenhao.springmall.model.Product@63122ce, com.chenhao.springmall.model.Product@1ada0f32, com.chenhao.springmall.model.Product@57f87b07, com.chenhao.springmall.model.Product@cb8b09e]},[]> 執行時間: 8ms
2025-06-13 15:39:23 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:23 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:23 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@20c0eef0 執行時間: 5ms
2025-06-13 15:39:23 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@20c0eef0 執行時間: 5ms
2025-06-13 15:39:23 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:39:23 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:39:23 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@72c31cf4] 執行時間: 2ms
2025-06-13 15:39:23 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@72c31cf4] 執行時間: 2ms
2025-06-13 15:39:23 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [FOOD, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:39:23 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@62004982, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:23 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@61bcc0bf, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:23 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 15:39:23 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 15:39:23 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=47, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@5049a06e, com.chenhao.springmall.model.Product@7c551ed1, com.chenhao.springmall.model.Product@12f63d97, com.chenhao.springmall.model.Product@b88810, com.chenhao.springmall.model.Product@1d6f12b9, com.chenhao.springmall.model.Product@49183453, com.chenhao.springmall.model.Product@6a21a262, com.chenhao.springmall.model.Product@2e1d5f3e, com.chenhao.springmall.model.Product@4b026a9e, com.chenhao.springmall.model.Product@43307501, com.chenhao.springmall.model.Product@2465edb7, com.chenhao.springmall.model.Product@60c5b2aa]},[]> 執行時間: 10ms
2025-06-13 15:39:24 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:24 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:24 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@7957721 執行時間: 4ms
2025-06-13 15:39:24 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@7957721 執行時間: 4ms
2025-06-13 15:39:24 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:39:24 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:39:24 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@c6dd24c] 執行時間: 2ms
2025-06-13 15:39:24 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@c6dd24c] 執行時間: 2ms
2025-06-13 15:39:24 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [TOY, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:39:24 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@1d34e828, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:24 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@58b5d3ad, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:24 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:39:24 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:39:24 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@1adfdf0a]},[]> 執行時間: 5ms
2025-06-13 15:39:24 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:24 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:24 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@6f5a98e5 執行時間: 3ms
2025-06-13 15:39:24 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@6f5a98e5 執行時間: 4ms
2025-06-13 15:39:24 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:39:24 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:39:24 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@4b7d37d8] 執行時間: 2ms
2025-06-13 15:39:24 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@4b7d37d8] 執行時間: 2ms
2025-06-13 15:39:24 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [TOY, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:39:24 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@6a4c222f, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:24 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@37c0cf8e, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:24 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:39:24 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:39:24 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@2d72215c]},[]> 執行時間: 4ms
2025-06-13 15:39:25 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:25 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:25 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@219bcf6e 執行時間: 3ms
2025-06-13 15:39:25 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@219bcf6e 執行時間: 3ms
2025-06-13 15:39:25 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:39:25 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:39:25 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@52aa25d7] 執行時間: 2ms
2025-06-13 15:39:25 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@52aa25d7] 執行時間: 2ms
2025-06-13 15:39:25 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [E_BOOK, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:39:25 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@3d531eb0, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:25 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@1d20a19, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:25 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:39:25 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:39:25 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@48dfdab3]},[]> 執行時間: 5ms
2025-06-13 15:39:26 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:26 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:26 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@324e9d02 執行時間: 4ms
2025-06-13 15:39:26 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@324e9d02 執行時間: 4ms
2025-06-13 15:39:26 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:39:26 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:39:26 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@49ec62ae] 執行時間: 2ms
2025-06-13 15:39:26 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@49ec62ae] 執行時間: 3ms
2025-06-13 15:39:26 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:39:26 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@284be524, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:26 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@2f5907af, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:26 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 7ms
2025-06-13 15:39:26 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 7ms
2025-06-13 15:39:26 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=49, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@5347986e, com.chenhao.springmall.model.Product@50b09717, com.chenhao.springmall.model.Product@1cb11696, com.chenhao.springmall.model.Product@222d8e4f, com.chenhao.springmall.model.Product@4d46f68c, com.chenhao.springmall.model.Product@191ad81c, com.chenhao.springmall.model.Product@d0b780f, com.chenhao.springmall.model.Product@439ad017, com.chenhao.springmall.model.Product@3912ac7e, com.chenhao.springmall.model.Product@76075978, com.chenhao.springmall.model.Product@209a9cb7, com.chenhao.springmall.model.Product@3595eadb]},[]> 執行時間: 8ms
2025-06-13 15:39:28 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showEditProductPage() 參數: [1, {}]
2025-06-13 15:39:28 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProductById() 參數: [1]
2025-06-13 15:39:28 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findById() 參數: [1]
2025-06-13 15:39:28 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findById() 返回值: Optional[com.chenhao.springmall.model.Product@44b8e272] 執行時間: 4ms
2025-06-13 15:39:28 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProductById() 返回值: com.chenhao.springmall.model.Product@44b8e272 執行時間: 4ms
2025-06-13 15:39:28 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showEditProductPage() 返回值: product-update 執行時間: 4ms
2025-06-13 15:39:31 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 15:39:31 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@5fd559d, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:39:31 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@43e92604, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:39:31 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 15:39:31 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 15:39:31 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 8ms
2025-06-13 15:39:31 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:31 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:31 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@764bcff2 執行時間: 3ms
2025-06-13 15:39:31 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@764bcff2 執行時間: 3ms
2025-06-13 15:39:31 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:39:31 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:39:31 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@75bf8769] 執行時間: 2ms
2025-06-13 15:39:31 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@75bf8769] 執行時間: 2ms
2025-06-13 15:39:31 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:39:31 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@639d6927, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:31 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@7177448f, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:39:31 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 6ms
2025-06-13 15:39:31 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 7ms
2025-06-13 15:39:31 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=49, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@53fa624e, com.chenhao.springmall.model.Product@1e1538fd, com.chenhao.springmall.model.Product@649a2744, com.chenhao.springmall.model.Product@48a4533f, com.chenhao.springmall.model.Product@484cb077, com.chenhao.springmall.model.Product@7fa9ab53, com.chenhao.springmall.model.Product@4a3c13e5, com.chenhao.springmall.model.Product@20eb9c36, com.chenhao.springmall.model.Product@d895f54, com.chenhao.springmall.model.Product@3fc88e85, com.chenhao.springmall.model.Product@154111a2, com.chenhao.springmall.model.Product@69373510]},[]> 執行時間: 7ms
2025-06-13 15:39:34 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:34 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:39:34 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@22299f63 執行時間: 4ms
2025-06-13 15:39:34 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@22299f63 執行時間: 5ms
2025-06-13 15:39:34 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:39:34 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:39:34 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@784380de] 執行時間: 2ms
2025-06-13 15:39:34 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@784380de] 執行時間: 2ms
2025-06-13 15:39:34 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showNewProductPage() 參數: [{}]
2025-06-13 15:39:34 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showNewProductPage() 返回值: product-form 執行時間: 0ms
2025-06-13 15:39:34 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showNewProductPage() 參數: [{}]
2025-06-13 15:39:34 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showNewProductPage() 返回值: product-form 執行時間: 0ms
2025-06-13 15:40:52 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.createProduct() 參數: [com.chenhao.springmall.dto.ProductRequest@525b5aef]
2025-06-13 15:40:52 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.createProduct() 參數: [com.chenhao.springmall.dto.ProductRequest@525b5aef]
2025-06-13 15:40:52 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.save() 參數: [com.chenhao.springmall.model.Product@7355a373]
2025-06-13 15:40:52 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.save() 返回值: com.chenhao.springmall.model.Product@7355a373 執行時間: 9ms
2025-06-13 15:40:52 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.createProduct() 返回值: 59 執行時間: 9ms
2025-06-13 15:40:52 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProductById() 參數: [59]
2025-06-13 15:40:52 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findById() 參數: [59]
2025-06-13 15:40:52 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findById() 返回值: Optional[com.chenhao.springmall.model.Product@7355a373] 執行時間: 3ms
2025-06-13 15:40:52 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProductById() 返回值: com.chenhao.springmall.model.Product@7355a373 執行時間: 3ms
2025-06-13 15:40:52 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.createProduct() 返回值: <201 CREATED Created,com.chenhao.springmall.model.Product@7355a373,[]> 執行時間: 162ms
2025-06-13 15:40:56 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 15:40:56 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@75cf04dc, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:40:56 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@42a7bfcd, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:40:56 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 13ms
2025-06-13 15:40:56 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 13ms
2025-06-13 15:40:56 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 14ms
2025-06-13 15:40:56 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:40:56 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:40:56 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@c699a3e 執行時間: 6ms
2025-06-13 15:40:56 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@c699a3e 執行時間: 6ms
2025-06-13 15:40:56 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:40:56 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:40:56 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3bf42569] 執行時間: 6ms
2025-06-13 15:40:56 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3bf42569] 執行時間: 6ms
2025-06-13 15:40:56 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:40:56 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@2b01a637, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:40:56 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@47c8a9aa, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:40:56 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 15:40:56 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 15:40:56 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=50, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@4c911942, com.chenhao.springmall.model.Product@640ba653, com.chenhao.springmall.model.Product@af77089, com.chenhao.springmall.model.Product@2c7dcfa5, com.chenhao.springmall.model.Product@68e29861, com.chenhao.springmall.model.Product@51e28210, com.chenhao.springmall.model.Product@6020d39d, com.chenhao.springmall.model.Product@22e238db, com.chenhao.springmall.model.Product@5e3f9d76, com.chenhao.springmall.model.Product@1b0866a3, com.chenhao.springmall.model.Product@7dd2f264, com.chenhao.springmall.model.Product@4e4529e5]},[]> 執行時間: 8ms
2025-06-13 15:40:59 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:40:59 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:40:59 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@66349805 執行時間: 4ms
2025-06-13 15:40:59 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@66349805 執行時間: 5ms
2025-06-13 15:40:59 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:40:59 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:40:59 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2edb370b] 執行時間: 2ms
2025-06-13 15:40:59 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2edb370b] 執行時間: 2ms
2025-06-13 15:40:59 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 4, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:40:59 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@2414f12e, Page request [number: 4, size 12, sort: UNSORTED]]
2025-06-13 15:40:59 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@1dceb444, Page request [number: 4, size 12, sort: UNSORTED]]
2025-06-13 15:40:59 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 5 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:40:59 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 5 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:40:59 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=50, totalPages=5, currentPage=4, products=[com.chenhao.springmall.model.Product@2481d76, com.chenhao.springmall.model.Product@1fab699e]},[]> 執行時間: 5ms
2025-06-13 15:41:08 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:08 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:08 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@f19850 執行時間: 6ms
2025-06-13 15:41:08 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@f19850 執行時間: 6ms
2025-06-13 15:41:08 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:41:08 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:41:08 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3d4245b6] 執行時間: 2ms
2025-06-13 15:41:08 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3d4245b6] 執行時間: 2ms
2025-06-13 15:41:08 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:41:08 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@7a89c942, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:08 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@630535ed, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:08 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 6ms
2025-06-13 15:41:08 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 7ms
2025-06-13 15:41:08 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=50, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@440f15a4, com.chenhao.springmall.model.Product@369d39df, com.chenhao.springmall.model.Product@441fd22b, com.chenhao.springmall.model.Product@4b5635fd, com.chenhao.springmall.model.Product@77c8ab06, com.chenhao.springmall.model.Product@28c437e1, com.chenhao.springmall.model.Product@12f03658, com.chenhao.springmall.model.Product@68f30026, com.chenhao.springmall.model.Product@5a5106a5, com.chenhao.springmall.model.Product@53234931, com.chenhao.springmall.model.Product@4072f7fb, com.chenhao.springmall.model.Product@30703de3]},[]> 執行時間: 8ms
2025-06-13 15:41:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@18e7d8e3 執行時間: 4ms
2025-06-13 15:41:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@18e7d8e3 執行時間: 5ms
2025-06-13 15:41:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:41:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:41:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3f6b6ac4] 執行時間: 25ms
2025-06-13 15:41:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3f6b6ac4] 執行時間: 26ms
2025-06-13 15:41:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [FOOD, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:41:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@2d5628e8, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@9efa46e, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 15:41:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 15:41:12 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=47, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@78ca9683, com.chenhao.springmall.model.Product@129ad5cf, com.chenhao.springmall.model.Product@57d195e8, com.chenhao.springmall.model.Product@2cd2a4e6, com.chenhao.springmall.model.Product@4171, com.chenhao.springmall.model.Product@44f0d813, com.chenhao.springmall.model.Product@1fd56bb0, com.chenhao.springmall.model.Product@26191938, com.chenhao.springmall.model.Product@2410cf43, com.chenhao.springmall.model.Product@6662ab92, com.chenhao.springmall.model.Product@52ded405, com.chenhao.springmall.model.Product@3c60c7bf]},[]> 執行時間: 9ms
2025-06-13 15:41:13 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:13 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:13 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@7ead251b 執行時間: 4ms
2025-06-13 15:41:13 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@7ead251b 執行時間: 4ms
2025-06-13 15:41:13 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:41:13 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:41:13 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@7ddab4d0] 執行時間: 2ms
2025-06-13 15:41:13 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@7ddab4d0] 執行時間: 2ms
2025-06-13 15:41:13 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [TOY, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:41:13 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@2a5fef17, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:13 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@2109502d, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:13 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:41:13 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:41:13 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@5c3ae08d]},[]> 執行時間: 4ms
2025-06-13 15:41:14 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:14 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:14 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@2b1b362d 執行時間: 3ms
2025-06-13 15:41:14 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@2b1b362d 執行時間: 5ms
2025-06-13 15:41:14 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:41:14 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:41:14 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@559b82b2] 執行時間: 1ms
2025-06-13 15:41:14 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@559b82b2] 執行時間: 2ms
2025-06-13 15:41:14 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [E_BOOK, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:41:14 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@6ce6cda0, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:14 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@417e60c5, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:14 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 3ms
2025-06-13 15:41:14 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 3ms
2025-06-13 15:41:14 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=2, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@6ed83ca6, com.chenhao.springmall.model.Product@6d78d61e]},[]> 執行時間: 4ms
2025-06-13 15:41:15 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:15 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:15 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@dd9b954 執行時間: 4ms
2025-06-13 15:41:15 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@dd9b954 執行時間: 4ms
2025-06-13 15:41:15 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:41:15 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:41:15 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@182d3a84] 執行時間: 1ms
2025-06-13 15:41:15 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@182d3a84] 執行時間: 1ms
2025-06-13 15:41:15 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [E_BOOK, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:41:15 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@47d3ba4d, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:15 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@53fcd8f8, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:15 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:41:15 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:41:15 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=2, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@5b460adb, com.chenhao.springmall.model.Product@7322cd78]},[]> 執行時間: 4ms
2025-06-13 15:41:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@8b7412b 執行時間: 3ms
2025-06-13 15:41:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@8b7412b 執行時間: 3ms
2025-06-13 15:41:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:41:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:41:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5cc32308] 執行時間: 1ms
2025-06-13 15:41:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5cc32308] 執行時間: 1ms
2025-06-13 15:41:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [TOY, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:41:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@79b115ee, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@334cae15, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 3ms
2025-06-13 15:41:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:41:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=1, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@73ba045]},[]> 執行時間: 5ms
2025-06-13 15:41:16 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:16 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:16 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@42d28169 執行時間: 4ms
2025-06-13 15:41:16 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@42d28169 執行時間: 4ms
2025-06-13 15:41:16 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:41:16 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:41:16 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@4994ae50] 執行時間: 2ms
2025-06-13 15:41:16 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@4994ae50] 執行時間: 2ms
2025-06-13 15:41:16 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [FOOD, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:41:16 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@3714de3a, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:16 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@3e5a7f74, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:16 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 6ms
2025-06-13 15:41:16 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 6ms
2025-06-13 15:41:16 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=47, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@682c5a31, com.chenhao.springmall.model.Product@50e49de7, com.chenhao.springmall.model.Product@102b5e06, com.chenhao.springmall.model.Product@50ec58fb, com.chenhao.springmall.model.Product@5a1b6d05, com.chenhao.springmall.model.Product@2e64d804, com.chenhao.springmall.model.Product@64f578a0, com.chenhao.springmall.model.Product@566ccf45, com.chenhao.springmall.model.Product@571ef3c8, com.chenhao.springmall.model.Product@5f32a5d7, com.chenhao.springmall.model.Product@104df6e9, com.chenhao.springmall.model.Product@206b1542]},[]> 執行時間: 7ms
2025-06-13 15:41:17 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:17 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:17 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@4eda5a59 執行時間: 3ms
2025-06-13 15:41:17 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@4eda5a59 執行時間: 4ms
2025-06-13 15:41:17 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:41:17 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:41:17 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2ade8669] 執行時間: 1ms
2025-06-13 15:41:17 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2ade8669] 執行時間: 1ms
2025-06-13 15:41:17 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:41:17 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@342f2fcf, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:17 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@31306f48, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:17 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 6ms
2025-06-13 15:41:17 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 7ms
2025-06-13 15:41:17 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=50, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@251ffeda, com.chenhao.springmall.model.Product@1dfc53d, com.chenhao.springmall.model.Product@39392a76, com.chenhao.springmall.model.Product@52ff65a8, com.chenhao.springmall.model.Product@8cca803, com.chenhao.springmall.model.Product@77c5620a, com.chenhao.springmall.model.Product@75f9c1e, com.chenhao.springmall.model.Product@2e247b78, com.chenhao.springmall.model.Product@4345420f, com.chenhao.springmall.model.Product@1fccbd5f, com.chenhao.springmall.model.Product@64087dd4, com.chenhao.springmall.model.Product@69fa2596]},[]> 執行時間: 8ms
2025-06-13 15:41:21 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberController.loginPage() 參數: [{}]
2025-06-13 15:41:21 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberController.loginPage() 返回值: login 執行時間: 0ms
2025-06-13 15:41:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: AuthController.login() 參數: [LoginRequest(email=test2@com.tw, password=222)]
2025-06-13 15:41:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test2@com.tw]
2025-06-13 15:41:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test2@com.tw]
2025-06-13 15:41:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@67b8ad0e 執行時間: 4ms
2025-06-13 15:41:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@67b8ad0e 執行時間: 4ms
2025-06-13 15:41:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [2]
2025-06-13 15:41:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [2]
2025-06-13 15:41:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2d2faa7e] 執行時間: 2ms
2025-06-13 15:41:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2d2faa7e] 執行時間: 2ms
2025-06-13 15:41:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test2@com.tw]
2025-06-13 15:41:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test2@com.tw]
2025-06-13 15:41:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@67b8ad0e 執行時間: 2ms
2025-06-13 15:41:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@67b8ad0e 執行時間: 2ms
2025-06-13 15:41:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [2]
2025-06-13 15:41:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [2]
2025-06-13 15:41:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2d2faa7e] 執行時間: 1ms
2025-06-13 15:41:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2d2faa7e] 執行時間: 2ms
2025-06-13 15:41:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: AuthController.login() 返回值: <200 OK OK,{token=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0MkBjb20udHciLCJyb2xlcyI6WyJST0xFX05PUk1BTF9NRU1CRVIiXSwiaWF0IjoxNzQ5ODAwNDg0LCJleHAiOjE3NDk4ODY4ODR9.L8vI9uZHJjI_B-K5i2Tho6wkbQV6797CAVDymI8dIns},[]> 執行時間: 259ms
2025-06-13 15:41:24 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 15:41:24 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@3407f2e1, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:41:24 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@17a769b3, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:41:24 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 15:41:24 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 15:41:24 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 10ms
2025-06-13 15:41:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test2@com.tw]
2025-06-13 15:41:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test2@com.tw]
2025-06-13 15:41:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@3593a7e2 執行時間: 11ms
2025-06-13 15:41:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@3593a7e2 執行時間: 11ms
2025-06-13 15:41:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [2]
2025-06-13 15:41:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [2]
2025-06-13 15:41:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5830b0d3] 執行時間: 5ms
2025-06-13 15:41:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5830b0d3] 執行時間: 5ms
2025-06-13 15:41:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test2@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_NORMAL_MEMBER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_NORMAL_MEMBER]]]
2025-06-13 15:41:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@50f329ba, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@d79bc05, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 15:41:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 15:41:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=50, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@6cb90902, com.chenhao.springmall.model.Product@43ffc140, com.chenhao.springmall.model.Product@74db4c78, com.chenhao.springmall.model.Product@3ecacf95, com.chenhao.springmall.model.Product@1a1f3057, com.chenhao.springmall.model.Product@27571795, com.chenhao.springmall.model.Product@9c1278b, com.chenhao.springmall.model.Product@619ff741, com.chenhao.springmall.model.Product@261fead, com.chenhao.springmall.model.Product@1d15bacb, com.chenhao.springmall.model.Product@1de83b9d, com.chenhao.springmall.model.Product@3d3e29e]},[]> 執行時間: 13ms
2025-06-13 15:41:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test2@com.tw]
2025-06-13 15:41:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test2@com.tw]
2025-06-13 15:41:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@332d49d7 執行時間: 4ms
2025-06-13 15:41:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@332d49d7 執行時間: 4ms
2025-06-13 15:41:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [2]
2025-06-13 15:41:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [2]
2025-06-13 15:41:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@4f36a5db] 執行時間: 2ms
2025-06-13 15:41:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@4f36a5db] 執行時間: 2ms
2025-06-13 15:41:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [FOOD, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test2@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_NORMAL_MEMBER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_NORMAL_MEMBER]]]
2025-06-13 15:41:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@1adda730, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@4304c7c1, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 6ms
2025-06-13 15:41:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 6ms
2025-06-13 15:41:27 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=47, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@2c542deb, com.chenhao.springmall.model.Product@76724bb6, com.chenhao.springmall.model.Product@39897201, com.chenhao.springmall.model.Product@38a0ae9b, com.chenhao.springmall.model.Product@3516f711, com.chenhao.springmall.model.Product@51dd25fe, com.chenhao.springmall.model.Product@23b65cbe, com.chenhao.springmall.model.Product@1edfea25, com.chenhao.springmall.model.Product@1cf33890, com.chenhao.springmall.model.Product@24390c25, com.chenhao.springmall.model.Product@357be7b0, com.chenhao.springmall.model.Product@5414bdf8]},[]> 執行時間: 7ms
2025-06-13 15:41:28 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test2@com.tw]
2025-06-13 15:41:28 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test2@com.tw]
2025-06-13 15:41:28 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@349b0c58 執行時間: 3ms
2025-06-13 15:41:28 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@349b0c58 執行時間: 3ms
2025-06-13 15:41:28 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [2]
2025-06-13 15:41:28 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [2]
2025-06-13 15:41:28 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@72388fad] 執行時間: 1ms
2025-06-13 15:41:28 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@72388fad] 執行時間: 2ms
2025-06-13 15:41:28 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [FOOD, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test2@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_NORMAL_MEMBER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_NORMAL_MEMBER]]]
2025-06-13 15:41:28 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@7c2e6c92, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:28 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@768f054e, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:28 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 6ms
2025-06-13 15:41:28 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 6ms
2025-06-13 15:41:28 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=47, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@540fd39a, com.chenhao.springmall.model.Product@4011b9bc, com.chenhao.springmall.model.Product@5045c230, com.chenhao.springmall.model.Product@4e017771, com.chenhao.springmall.model.Product@6438fe28, com.chenhao.springmall.model.Product@29a9774a, com.chenhao.springmall.model.Product@5783640d, com.chenhao.springmall.model.Product@12fc2b73, com.chenhao.springmall.model.Product@31964eba, com.chenhao.springmall.model.Product@53e77ce5, com.chenhao.springmall.model.Product@1f08d998, com.chenhao.springmall.model.Product@6cdcceb9]},[]> 執行時間: 6ms
2025-06-13 15:41:28 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test2@com.tw]
2025-06-13 15:41:28 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test2@com.tw]
2025-06-13 15:41:28 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@2d988d89 執行時間: 3ms
2025-06-13 15:41:28 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@2d988d89 執行時間: 3ms
2025-06-13 15:41:28 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [2]
2025-06-13 15:41:28 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [2]
2025-06-13 15:41:28 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@24ad6e9f] 執行時間: 2ms
2025-06-13 15:41:28 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@24ad6e9f] 執行時間: 2ms
2025-06-13 15:41:28 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [E_BOOK, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test2@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_NORMAL_MEMBER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_NORMAL_MEMBER]]]
2025-06-13 15:41:28 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@37af3f55, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:28 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@47e3a2df, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:28 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:41:28 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:41:28 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=2, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@1e2abe34, com.chenhao.springmall.model.Product@4020830d]},[]> 執行時間: 4ms
2025-06-13 15:41:29 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test2@com.tw]
2025-06-13 15:41:29 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test2@com.tw]
2025-06-13 15:41:29 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@65bba686 執行時間: 3ms
2025-06-13 15:41:29 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@65bba686 執行時間: 4ms
2025-06-13 15:41:29 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [2]
2025-06-13 15:41:29 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [2]
2025-06-13 15:41:29 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@475b974d] 執行時間: 2ms
2025-06-13 15:41:29 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@475b974d] 執行時間: 2ms
2025-06-13 15:41:29 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [E_BOOK, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test2@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_NORMAL_MEMBER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_NORMAL_MEMBER]]]
2025-06-13 15:41:29 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@1be5c751, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:29 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@5e958838, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:29 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:41:29 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 15:41:29 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=2, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@b3c3ff9, com.chenhao.springmall.model.Product@41e6f94f]},[]> 執行時間: 4ms
2025-06-13 15:41:29 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test2@com.tw]
2025-06-13 15:41:29 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test2@com.tw]
2025-06-13 15:41:29 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@1f51519d 執行時間: 4ms
2025-06-13 15:41:29 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@1f51519d 執行時間: 5ms
2025-06-13 15:41:29 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [2]
2025-06-13 15:41:29 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [2]
2025-06-13 15:41:29 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@72ffae04] 執行時間: 2ms
2025-06-13 15:41:29 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@72ffae04] 執行時間: 2ms
2025-06-13 15:41:29 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test2@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_NORMAL_MEMBER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_NORMAL_MEMBER]]]
2025-06-13 15:41:29 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@5b1c63d9, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:29 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@744d1e4c, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:29 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:41:29 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 6ms
2025-06-13 15:41:29 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=50, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@736c60c0, com.chenhao.springmall.model.Product@1d0b0202, com.chenhao.springmall.model.Product@344ffaff, com.chenhao.springmall.model.Product@49554cc6, com.chenhao.springmall.model.Product@59af5f4c, com.chenhao.springmall.model.Product@1cf15d69, com.chenhao.springmall.model.Product@5722c40a, com.chenhao.springmall.model.Product@34728154, com.chenhao.springmall.model.Product@1704eda9, com.chenhao.springmall.model.Product@188e035, com.chenhao.springmall.model.Product@40cb669a, com.chenhao.springmall.model.Product@601327f6]},[]> 執行時間: 6ms
2025-06-13 15:41:30 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberController.loginPage() 參數: [{}]
2025-06-13 15:41:30 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberController.loginPage() 返回值: login 執行時間: 0ms
2025-06-13 15:41:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: AuthController.login() 參數: [LoginRequest(email=test1@com.tw, password=111)]
2025-06-13 15:41:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@1fff0337 執行時間: 4ms
2025-06-13 15:41:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@1fff0337 執行時間: 4ms
2025-06-13 15:41:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:41:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:41:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@7d42deba] 執行時間: 1ms
2025-06-13 15:41:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@7d42deba] 執行時間: 2ms
2025-06-13 15:41:33 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:33 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:33 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@1fff0337 執行時間: 3ms
2025-06-13 15:41:33 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@1fff0337 執行時間: 3ms
2025-06-13 15:41:33 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:41:33 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:41:33 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@7d42deba] 執行時間: 2ms
2025-06-13 15:41:33 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@7d42deba] 執行時間: 2ms
2025-06-13 15:41:33 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: AuthController.login() 返回值: <200 OK OK,{token=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0MUBjb20udHciLCJyb2xlcyI6WyJST0xFX0FETUlOIl0sImlhdCI6MTc0OTgwMDQ5MywiZXhwIjoxNzQ5ODg2ODkzfQ.ObI30aE9aqCuzYL19PGr4FiVrPu7bAlDgQsP8uTtohc},[]> 執行時間: 123ms
2025-06-13 15:41:33 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 15:41:33 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@18152d3b, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:41:33 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@5f5bb07e, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:41:33 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 15:41:33 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 15:41:33 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 9ms
2025-06-13 15:41:33 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:33 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:33 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@5e739904 執行時間: 3ms
2025-06-13 15:41:33 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@5e739904 執行時間: 4ms
2025-06-13 15:41:33 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:41:33 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:41:33 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5d710518] 執行時間: 2ms
2025-06-13 15:41:33 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5d710518] 執行時間: 2ms
2025-06-13 15:41:33 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:41:33 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@46270f86, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:33 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@1f90a52a, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:33 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 6ms
2025-06-13 15:41:33 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 6ms
2025-06-13 15:41:33 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=50, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@75ff060b, com.chenhao.springmall.model.Product@68e2657f, com.chenhao.springmall.model.Product@6e6adf4a, com.chenhao.springmall.model.Product@592c03ab, com.chenhao.springmall.model.Product@54ee89db, com.chenhao.springmall.model.Product@2f5cc7a4, com.chenhao.springmall.model.Product@17f4cd8a, com.chenhao.springmall.model.Product@2e7cb584, com.chenhao.springmall.model.Product@e7c41c1, com.chenhao.springmall.model.Product@4754d64d, com.chenhao.springmall.model.Product@76fdcbb0, com.chenhao.springmall.model.Product@3de6907e]},[]> 執行時間: 6ms
2025-06-13 15:41:40 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 15:41:40 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@44012328, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:41:40 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@fc7eec2, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:41:40 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 15:41:40 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 15:41:40 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 10ms
2025-06-13 15:41:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:41:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@4a373fe 執行時間: 4ms
2025-06-13 15:41:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@4a373fe 執行時間: 5ms
2025-06-13 15:41:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:41:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:41:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@746c2bfe] 執行時間: 1ms
2025-06-13 15:41:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@746c2bfe] 執行時間: 1ms
2025-06-13 15:41:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:41:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@51ee4351, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@3239b0b2, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:41:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 19ms
2025-06-13 15:41:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 20ms
2025-06-13 15:41:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=50, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@349e3161, com.chenhao.springmall.model.Product@7f31968e, com.chenhao.springmall.model.Product@6f2112ae, com.chenhao.springmall.model.Product@2af269ca, com.chenhao.springmall.model.Product@6f2240cc, com.chenhao.springmall.model.Product@1c543e40, com.chenhao.springmall.model.Product@7b87eb06, com.chenhao.springmall.model.Product@42826185, com.chenhao.springmall.model.Product@3f5b7d39, com.chenhao.springmall.model.Product@240e2ac, com.chenhao.springmall.model.Product@46dbf639, com.chenhao.springmall.model.Product@1784292e]},[]> 執行時間: 20ms
2025-06-13 15:42:28 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showEditProductPage() 參數: [1, {}]
2025-06-13 15:42:28 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProductById() 參數: [1]
2025-06-13 15:42:28 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findById() 參數: [1]
2025-06-13 15:42:28 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findById() 返回值: Optional[com.chenhao.springmall.model.Product@2c88008f] 執行時間: 7ms
2025-06-13 15:42:28 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProductById() 返回值: com.chenhao.springmall.model.Product@2c88008f 執行時間: 7ms
2025-06-13 15:42:28 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showEditProductPage() 返回值: product-update 執行時間: 7ms
2025-06-13 15:42:32 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 15:42:32 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@92c8075, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:42:32 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@5d3e747e, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 15:42:32 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 10ms
2025-06-13 15:42:32 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 10ms
2025-06-13 15:42:32 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 10ms
2025-06-13 15:42:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 15:42:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy131.findByEmail() 參數: [test1@com.tw]
2025-06-13 15:42:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy131.findByEmail() 返回值: com.chenhao.springmall.model.Member@57dbf2f8 執行時間: 5ms
2025-06-13 15:42:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@57dbf2f8 執行時間: 5ms
2025-06-13 15:42:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 15:42:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy135.findRolesByMemberId() 參數: [1]
2025-06-13 15:42:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy135.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@534dce84] 執行時間: 4ms
2025-06-13 15:42:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@534dce84] 執行時間: 4ms
2025-06-13 15:42:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=DCAF1E9806DB11CACA891CBF68ABB349], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 15:42:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@52cebce9, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:42:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy138.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1944/0x00000187b3c81ab0@54dca6bc, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 15:42:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy138.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 15:42:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 7ms
2025-06-13 15:42:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=50, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@cfd6e2f, com.chenhao.springmall.model.Product@42607b19, com.chenhao.springmall.model.Product@7ce3f4ec, com.chenhao.springmall.model.Product@53f3b6d1, com.chenhao.springmall.model.Product@34183696, com.chenhao.springmall.model.Product@75612bbf, com.chenhao.springmall.model.Product@1646f56b, com.chenhao.springmall.model.Product@584d8c4c, com.chenhao.springmall.model.Product@2d94ad55, com.chenhao.springmall.model.Product@51d4478b, com.chenhao.springmall.model.Product@70180d77, com.chenhao.springmall.model.Product@4403c0d4]},[]> 執行時間: 7ms
2025-06-13 16:34:44 [main] INFO  c.c.springmall.SpringMallApplication - Starting SpringMallApplication using Java 17.0.15 with PID 13628 (C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall\target\classes started by user1 in C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall)
2025-06-13 16:34:44 [main] DEBUG c.c.springmall.SpringMallApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-06-13 16:34:44 [main] INFO  c.c.springmall.SpringMallApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-13 16:34:45 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-13 16:34:45 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 81 ms. Found 4 JPA repository interfaces.
2025-06-13 16:34:46 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-13 16:34:46 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-13 16:34:46 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-06-13 16:34:46 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-13 16:34:46 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2228 ms
2025-06-13 16:34:46 [main] DEBUG c.c.s.jwt.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-13 16:34:47 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-13 16:34:47 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@45e7bb79
2025-06-13 16:34:47 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-13 16:34:47 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-13 16:34:47 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-06-13 16:34:47 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-13 16:34:47 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-13 16:34:49 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-13 16:34:49 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 16:34:49 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-13 16:34:50 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-13 16:34:50 [main] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-13 16:34:51 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4ae45ff, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3cced001, org.springframework.security.web.context.SecurityContextHolderFilter@13473685, org.springframework.security.web.header.HeaderWriterFilter@33d828b3, org.springframework.web.filter.CorsFilter@6c927487, org.springframework.security.web.authentication.logout.LogoutFilter@69aecbba, com.chenhao.springmall.jwt.JwtAuthenticationFilter@11df2829, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3ec6bc6f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4b6c5fa2, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@79d31e24, org.springframework.security.web.access.ExceptionTranslationFilter@6092d41, org.springframework.security.web.access.intercept.AuthorizationFilter@79753f20]
2025-06-13 16:34:51 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-13 16:34:51 [main] INFO  c.c.springmall.SpringMallApplication - Started SpringMallApplication in 7.875 seconds (process running for 8.73)
2025-06-13 16:34:56 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-13 16:34:56 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-13 16:34:56 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 4 ms
2025-06-13 16:34:56 [http-nio-8080-exec-1] WARN  o.s.w.s.h.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/' (previous null). Performing CorsConfiguration lookup. This is logged once only at WARN level, and every time at TRACE.
2025-06-13 16:34:56 [http-nio-8080-exec-1] WARN  o.s.w.s.h.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-06-13 16:34:56 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.redirectToProducts() 參數: []
2025-06-13 16:34:56 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.redirectToProducts() 返回值: redirect:/products 執行時間: 0ms
2025-06-13 16:34:56 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 16:34:56 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@2f6c34e0, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 16:34:56 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1612/0x0000024d14b028f0@75fa1d8, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 16:34:57 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 153ms
2025-06-13 16:34:57 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 161ms
2025-06-13 16:34:57 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 163ms
2025-06-13 16:34:57 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 16:34:57 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy132.findByEmail() 參數: [test1@com.tw]
2025-06-13 16:34:57 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy132.findByEmail() 返回值: com.chenhao.springmall.model.Member@2322a698 執行時間: 100ms
2025-06-13 16:34:57 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@2322a698 執行時間: 100ms
2025-06-13 16:34:57 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 16:34:57 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy136.findRolesByMemberId() 參數: [1]
2025-06-13 16:34:57 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy136.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3830fe73] 執行時間: 124ms
2025-06-13 16:34:57 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3830fe73] 執行時間: 124ms
2025-06-13 16:34:57 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 16:34:57 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@390a8b3e, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 16:34:57 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1612/0x0000024d14b028f0@34069f58, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 16:34:57 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 11ms
2025-06-13 16:34:57 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 11ms
2025-06-13 16:34:57 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=50, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@7dcc87ff, com.chenhao.springmall.model.Product@48b7b049, com.chenhao.springmall.model.Product@1c28aa09, com.chenhao.springmall.model.Product@4136a1be, com.chenhao.springmall.model.Product@58dc2518, com.chenhao.springmall.model.Product@2d9ce3b2, com.chenhao.springmall.model.Product@74bd7cea, com.chenhao.springmall.model.Product@721892, com.chenhao.springmall.model.Product@393f1961, com.chenhao.springmall.model.Product@7374ec87, com.chenhao.springmall.model.Product@6cb1842f, com.chenhao.springmall.model.Product@69668ea6]},[]> 執行時間: 17ms
2025-06-13 16:34:59 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberController.loginPage() 參數: [{}]
2025-06-13 16:34:59 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberController.loginPage() 返回值: login 執行時間: 0ms
2025-06-13 16:35:02 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: AuthController.login() 參數: [LoginRequest(email=test1@com.tw, password=111)]
2025-06-13 16:35:02 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 16:35:02 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy132.findByEmail() 參數: [test1@com.tw]
2025-06-13 16:35:02 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy132.findByEmail() 返回值: com.chenhao.springmall.model.Member@9b3304 執行時間: 5ms
2025-06-13 16:35:02 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@9b3304 執行時間: 5ms
2025-06-13 16:35:02 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 16:35:02 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy136.findRolesByMemberId() 參數: [1]
2025-06-13 16:35:02 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy136.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@6d55e0d] 執行時間: 1ms
2025-06-13 16:35:02 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@6d55e0d] 執行時間: 2ms
2025-06-13 16:35:02 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 16:35:02 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy132.findByEmail() 參數: [test1@com.tw]
2025-06-13 16:35:02 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy132.findByEmail() 返回值: com.chenhao.springmall.model.Member@9b3304 執行時間: 5ms
2025-06-13 16:35:02 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@9b3304 執行時間: 6ms
2025-06-13 16:35:02 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 16:35:02 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy136.findRolesByMemberId() 參數: [1]
2025-06-13 16:35:02 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy136.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@6d55e0d] 執行時間: 2ms
2025-06-13 16:35:02 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@6d55e0d] 執行時間: 3ms
2025-06-13 16:35:02 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: AuthController.login() 返回值: <200 OK OK,{token=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0MUBjb20udHciLCJyb2xlcyI6WyJST0xFX0FETUlOIl0sImlhdCI6MTc0OTgwMzcwMiwiZXhwIjoxNzQ5ODkwMTAyfQ.9-ppxcsv4Et6iZlNWEmcXRRgRLXWrsTG1_yZ_ln4658},[]> 執行時間: 250ms
2025-06-13 16:35:02 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 16:35:02 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@1b67b99a, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 16:35:02 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1612/0x0000024d14b028f0@3102b536, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 16:35:02 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 16:35:02 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 16:35:02 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 11ms
2025-06-13 16:35:03 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 16:35:03 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy132.findByEmail() 參數: [test1@com.tw]
2025-06-13 16:35:03 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy132.findByEmail() 返回值: com.chenhao.springmall.model.Member@366d4c82 執行時間: 5ms
2025-06-13 16:35:03 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@366d4c82 執行時間: 5ms
2025-06-13 16:35:03 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 16:35:03 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy136.findRolesByMemberId() 參數: [1]
2025-06-13 16:35:03 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy136.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@1dfec30] 執行時間: 1ms
2025-06-13 16:35:03 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@1dfec30] 執行時間: 3ms
2025-06-13 16:35:03 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=85D67493A4AFC09430FC08310CA9C366], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 16:35:03 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@5a24b57c, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 16:35:03 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1612/0x0000024d14b028f0@53667fe8, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 16:35:03 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 15ms
2025-06-13 16:35:03 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 16ms
2025-06-13 16:35:03 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=50, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@61dfda39, com.chenhao.springmall.model.Product@5a24e39, com.chenhao.springmall.model.Product@7d17a1c7, com.chenhao.springmall.model.Product@7b729ce9, com.chenhao.springmall.model.Product@64639fac, com.chenhao.springmall.model.Product@7327d69f, com.chenhao.springmall.model.Product@337e58a5, com.chenhao.springmall.model.Product@5c841ff7, com.chenhao.springmall.model.Product@24e27534, com.chenhao.springmall.model.Product@693cdc19, com.chenhao.springmall.model.Product@28460aeb, com.chenhao.springmall.model.Product@5441d3b3]},[]> 執行時間: 16ms
2025-06-13 16:35:07 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 16:35:07 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy132.findByEmail() 參數: [test1@com.tw]
2025-06-13 16:35:07 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy132.findByEmail() 返回值: com.chenhao.springmall.model.Member@6934cb94 執行時間: 4ms
2025-06-13 16:35:07 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@6934cb94 執行時間: 5ms
2025-06-13 16:35:07 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 16:35:07 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy136.findRolesByMemberId() 參數: [1]
2025-06-13 16:35:07 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy136.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@494a4dfa] 執行時間: 2ms
2025-06-13 16:35:07 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@494a4dfa] 執行時間: 2ms
2025-06-13 16:35:07 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showNewProductPage() 參數: [{}]
2025-06-13 16:35:07 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showNewProductPage() 返回值: product-form 執行時間: 0ms
2025-06-13 16:35:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showNewProductPage() 參數: [{}]
2025-06-13 16:35:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showNewProductPage() 返回值: product-form 執行時間: 0ms
2025-06-13 16:35:28 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.createProduct() 參數: [com.chenhao.springmall.dto.ProductRequest@2f530287]
2025-06-13 16:35:28 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.createProduct() 參數: [com.chenhao.springmall.dto.ProductRequest@2f530287]
2025-06-13 16:35:28 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.save() 參數: [com.chenhao.springmall.model.Product@5a2eca26]
2025-06-13 16:35:28 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.save() 返回值: com.chenhao.springmall.model.Product@5a2eca26 執行時間: 46ms
2025-06-13 16:35:28 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.createProduct() 返回值: 60 執行時間: 50ms
2025-06-13 16:35:28 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProductById() 參數: [60]
2025-06-13 16:35:28 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.findById() 參數: [60]
2025-06-13 16:35:28 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.findById() 返回值: Optional[com.chenhao.springmall.model.Product@5a2eca26] 執行時間: 11ms
2025-06-13 16:35:28 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProductById() 返回值: com.chenhao.springmall.model.Product@5a2eca26 執行時間: 12ms
2025-06-13 16:35:28 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.createProduct() 返回值: <201 CREATED Created,com.chenhao.springmall.model.Product@5a2eca26,[]> 執行時間: 107ms
2025-06-13 16:35:29 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 16:35:29 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@248827d9, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 16:35:29 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1612/0x0000024d14b028f0@15e6e47b, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 16:35:29 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 10ms
2025-06-13 16:35:29 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 10ms
2025-06-13 16:35:29 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 10ms
2025-06-13 16:35:29 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 16:35:29 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy132.findByEmail() 參數: [test1@com.tw]
2025-06-13 16:35:29 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy132.findByEmail() 返回值: com.chenhao.springmall.model.Member@207509ef 執行時間: 13ms
2025-06-13 16:35:29 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@207509ef 執行時間: 15ms
2025-06-13 16:35:29 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 16:35:29 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy136.findRolesByMemberId() 參數: [1]
2025-06-13 16:35:29 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy136.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@679cf88] 執行時間: 4ms
2025-06-13 16:35:29 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@679cf88] 執行時間: 4ms
2025-06-13 16:35:29 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=85D67493A4AFC09430FC08310CA9C366], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 16:35:29 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@1f3eafd8, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 16:35:29 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1612/0x0000024d14b028f0@7249f235, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 16:35:30 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 20ms
2025-06-13 16:35:30 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 20ms
2025-06-13 16:35:30 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=51, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@21e93d94, com.chenhao.springmall.model.Product@50cac4c9, com.chenhao.springmall.model.Product@747c4a07, com.chenhao.springmall.model.Product@6a12f753, com.chenhao.springmall.model.Product@27f6218, com.chenhao.springmall.model.Product@4150212, com.chenhao.springmall.model.Product@122f4ce5, com.chenhao.springmall.model.Product@6f7a999c, com.chenhao.springmall.model.Product@16ec59c9, com.chenhao.springmall.model.Product@3ac5dc94, com.chenhao.springmall.model.Product@5265e74d, com.chenhao.springmall.model.Product@696822e4]},[]> 執行時間: 21ms
2025-06-13 16:35:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 16:35:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy132.findByEmail() 參數: [test1@com.tw]
2025-06-13 16:35:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy132.findByEmail() 返回值: com.chenhao.springmall.model.Member@7ce522f6 執行時間: 4ms
2025-06-13 16:35:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@7ce522f6 執行時間: 5ms
2025-06-13 16:35:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 16:35:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy136.findRolesByMemberId() 參數: [1]
2025-06-13 16:35:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy136.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@7d47d563] 執行時間: 2ms
2025-06-13 16:35:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@7d47d563] 執行時間: 2ms
2025-06-13 16:35:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 4, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=85D67493A4AFC09430FC08310CA9C366], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 16:35:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@328a6176, Page request [number: 4, size 12, sort: UNSORTED]]
2025-06-13 16:35:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1612/0x0000024d14b028f0@24de92d9, Page request [number: 4, size 12, sort: UNSORTED]]
2025-06-13 16:35:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.findAll() 返回值: Page 5 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 16:35:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 5 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 16:35:32 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=51, totalPages=5, currentPage=4, products=[com.chenhao.springmall.model.Product@18d1175a, com.chenhao.springmall.model.Product@11caa36c, com.chenhao.springmall.model.Product@64f2c29e]},[]> 執行時間: 5ms
2025-06-13 16:35:34 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 16:35:34 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy132.findByEmail() 參數: [test1@com.tw]
2025-06-13 16:35:34 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy132.findByEmail() 返回值: com.chenhao.springmall.model.Member@1d445553 執行時間: 4ms
2025-06-13 16:35:34 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@1d445553 執行時間: 4ms
2025-06-13 16:35:34 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 16:35:34 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy136.findRolesByMemberId() 參數: [1]
2025-06-13 16:35:34 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy136.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5c12900b] 執行時間: 2ms
2025-06-13 16:35:34 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5c12900b] 執行時間: 3ms
2025-06-13 16:35:34 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=85D67493A4AFC09430FC08310CA9C366], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 16:35:34 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@3324e383, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 16:35:34 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1612/0x0000024d14b028f0@5b52cac7, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 16:35:34 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 16:35:34 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 16:35:34 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=51, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@7ee092b2, com.chenhao.springmall.model.Product@14f979e7, com.chenhao.springmall.model.Product@5d9c39d4, com.chenhao.springmall.model.Product@15b53c58, com.chenhao.springmall.model.Product@6f3a595e, com.chenhao.springmall.model.Product@30d3231f, com.chenhao.springmall.model.Product@cbdfe48, com.chenhao.springmall.model.Product@30d6447b, com.chenhao.springmall.model.Product@d9b0b96, com.chenhao.springmall.model.Product@24791ae1, com.chenhao.springmall.model.Product@4755ef98, com.chenhao.springmall.model.Product@45a28e95]},[]> 執行時間: 9ms
2025-06-13 16:36:05 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberController.loginPage() 參數: [{}]
2025-06-13 16:36:05 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberController.loginPage() 返回值: login 執行時間: 0ms
2025-06-13 16:36:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: AuthController.login() 參數: [LoginRequest(email=test2@com.tw, password=222)]
2025-06-13 16:36:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test2@com.tw]
2025-06-13 16:36:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy132.findByEmail() 參數: [test2@com.tw]
2025-06-13 16:36:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy132.findByEmail() 返回值: com.chenhao.springmall.model.Member@668302fe 執行時間: 5ms
2025-06-13 16:36:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@668302fe 執行時間: 7ms
2025-06-13 16:36:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [2]
2025-06-13 16:36:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy136.findRolesByMemberId() 參數: [2]
2025-06-13 16:36:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy136.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@73b6c30b] 執行時間: 2ms
2025-06-13 16:36:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@73b6c30b] 執行時間: 2ms
2025-06-13 16:36:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test2@com.tw]
2025-06-13 16:36:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy132.findByEmail() 參數: [test2@com.tw]
2025-06-13 16:36:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy132.findByEmail() 返回值: com.chenhao.springmall.model.Member@668302fe 執行時間: 3ms
2025-06-13 16:36:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@668302fe 執行時間: 3ms
2025-06-13 16:36:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [2]
2025-06-13 16:36:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy136.findRolesByMemberId() 參數: [2]
2025-06-13 16:36:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy136.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@73b6c30b] 執行時間: 1ms
2025-06-13 16:36:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@73b6c30b] 執行時間: 2ms
2025-06-13 16:36:07 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: AuthController.login() 返回值: <200 OK OK,{token=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0MkBjb20udHciLCJyb2xlcyI6WyJST0xFX05PUk1BTF9NRU1CRVIiXSwiaWF0IjoxNzQ5ODAzNzY3LCJleHAiOjE3NDk4OTAxNjd9.q2dueOgrhHSsTloRlDs1rW-AAyXCqsRi53QOuK4tS1A},[]> 執行時間: 124ms
2025-06-13 16:36:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 16:36:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@3c5b45c0, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 16:36:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1612/0x0000024d14b028f0@2caef871, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 16:36:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 16:36:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 16:36:07 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 9ms
2025-06-13 16:36:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test2@com.tw]
2025-06-13 16:36:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy132.findByEmail() 參數: [test2@com.tw]
2025-06-13 16:36:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy132.findByEmail() 返回值: com.chenhao.springmall.model.Member@2dcccf85 執行時間: 6ms
2025-06-13 16:36:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@2dcccf85 執行時間: 6ms
2025-06-13 16:36:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [2]
2025-06-13 16:36:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy136.findRolesByMemberId() 參數: [2]
2025-06-13 16:36:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy136.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@16364461] 執行時間: 2ms
2025-06-13 16:36:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@16364461] 執行時間: 2ms
2025-06-13 16:36:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test2@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_NORMAL_MEMBER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=85D67493A4AFC09430FC08310CA9C366], Granted Authorities=[ROLE_NORMAL_MEMBER]]]
2025-06-13 16:36:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@76f316e9, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 16:36:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1612/0x0000024d14b028f0@5e9294b7, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 16:36:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 30ms
2025-06-13 16:36:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 30ms
2025-06-13 16:36:07 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=51, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@74ee4d9, com.chenhao.springmall.model.Product@5eb2ecc4, com.chenhao.springmall.model.Product@6217d725, com.chenhao.springmall.model.Product@1635847d, com.chenhao.springmall.model.Product@66add24e, com.chenhao.springmall.model.Product@2f30c693, com.chenhao.springmall.model.Product@73c292af, com.chenhao.springmall.model.Product@49eee6c6, com.chenhao.springmall.model.Product@41d97217, com.chenhao.springmall.model.Product@687420e1, com.chenhao.springmall.model.Product@f4480aa, com.chenhao.springmall.model.Product@31a29f52]},[]> 執行時間: 31ms
2025-06-13 16:41:36 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 16:41:36 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-13 16:41:37 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-13 16:41:50 [main] INFO  c.c.springmall.SpringMallApplication - Starting SpringMallApplication using Java 17.0.15 with PID 13356 (C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall\target\classes started by user1 in C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall)
2025-06-13 16:41:50 [main] DEBUG c.c.springmall.SpringMallApplication - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-13 16:41:50 [main] INFO  c.c.springmall.SpringMallApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-13 16:41:51 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-13 16:41:51 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 94 ms. Found 4 JPA repository interfaces.
2025-06-13 16:41:52 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-13 16:41:52 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-13 16:41:52 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-13 16:41:53 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-13 16:41:53 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2855 ms
2025-06-13 16:41:53 [main] DEBUG c.c.s.jwt.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-13 16:41:53 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-13 16:41:53 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7e81617a
2025-06-13 16:41:53 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-13 16:41:53 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-13 16:41:54 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.15.Final
2025-06-13 16:41:54 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-13 16:41:54 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-13 16:41:54 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0.22
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-13 16:41:56 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-13 16:41:56 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 16:41:56 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-13 16:41:57 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-13 16:41:57 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name myUserDetailsService
2025-06-13 16:41:58 [main] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-13 16:41:59 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-13 16:41:59 [main] INFO  c.c.springmall.SpringMallApplication - Started SpringMallApplication in 10.108 seconds (process running for 11.178)
2025-06-13 16:42:30 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-13 16:42:30 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-13 16:42:30 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 7 ms
2025-06-13 16:42:30 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.redirectToProducts() 參數: []
2025-06-13 16:42:30 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.redirectToProducts() 返回值: redirect:/products 執行時間: 0ms
2025-06-13 16:42:30 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 16:42:30 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@1a1a15f9, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 16:42:30 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@5d78ea8b, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 16:42:31 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 204ms
2025-06-13 16:42:31 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 236ms
2025-06-13 16:42:31 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 238ms
2025-06-13 16:42:31 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test2@com.tw]
2025-06-13 16:42:31 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test2@com.tw]
2025-06-13 16:42:31 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@b396f1e 執行時間: 124ms
2025-06-13 16:42:31 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@b396f1e 執行時間: 125ms
2025-06-13 16:42:31 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [2]
2025-06-13 16:42:31 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [2]
2025-06-13 16:42:32 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@52779c67] 執行時間: 144ms
2025-06-13 16:42:32 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@52779c67] 執行時間: 145ms
2025-06-13 16:42:32 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test2@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_NORMAL_MEMBER]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_NORMAL_MEMBER]]]
2025-06-13 16:42:32 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@16555c36, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 16:42:32 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@13aff684, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 16:42:32 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 15ms
2025-06-13 16:42:32 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 16ms
2025-06-13 16:42:32 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=51, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@686347a, com.chenhao.springmall.model.Product@7033d1d2, com.chenhao.springmall.model.Product@73845eda, com.chenhao.springmall.model.Product@1dca4289, com.chenhao.springmall.model.Product@2a5890ae, com.chenhao.springmall.model.Product@448b6976, com.chenhao.springmall.model.Product@15a89db3, com.chenhao.springmall.model.Product@5ab94b85, com.chenhao.springmall.model.Product@348a6d9c, com.chenhao.springmall.model.Product@2b5572a2, com.chenhao.springmall.model.Product@7a41377e, com.chenhao.springmall.model.Product@d757bf1]},[]> 執行時間: 23ms
2025-06-13 16:42:33 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberController.loginPage() 參數: [{}]
2025-06-13 16:42:33 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberController.loginPage() 返回值: login 執行時間: 0ms
2025-06-13 16:43:32 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberController.loginPage() 參數: [{}]
2025-06-13 16:43:32 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberController.loginPage() 返回值: login 執行時間: 0ms
2025-06-13 16:43:35 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: AuthController.login() 參數: [LoginRequest(email=test1@com.tw, password=111)]
2025-06-13 16:43:35 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 16:43:35 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 16:43:35 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@5b27e2e6 執行時間: 11ms
2025-06-13 16:43:35 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@5b27e2e6 執行時間: 13ms
2025-06-13 16:43:35 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 16:43:35 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 16:43:35 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5b889db4] 執行時間: 3ms
2025-06-13 16:43:35 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5b889db4] 執行時間: 3ms
2025-06-13 16:43:35 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 16:43:35 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 16:43:35 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@5b27e2e6 執行時間: 3ms
2025-06-13 16:43:35 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@5b27e2e6 執行時間: 4ms
2025-06-13 16:43:35 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 16:43:35 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 16:43:35 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5b889db4] 執行時間: 2ms
2025-06-13 16:43:35 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5b889db4] 執行時間: 2ms
2025-06-13 16:43:35 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: AuthController.login() 返回值: <200 OK OK,{token=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0MUBjb20udHciLCJyb2xlcyI6WyJST0xFX0FETUlOIl0sImlhdCI6MTc0OTgwNDIxNSwiZXhwIjoxNzQ5ODkwNjE1fQ.oKtpjiGjUa5jRZ8qphCPhkQ5MAUFQ0CYIn0ttqgocgY},[]> 執行時間: 271ms
2025-06-13 16:43:35 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 16:43:35 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@283cde87, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 16:43:35 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@506d90b2, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 16:43:35 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 14ms
2025-06-13 16:43:35 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 15ms
2025-06-13 16:43:35 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 16ms
2025-06-13 16:43:35 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 16:43:35 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 16:43:35 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@296bbe9c 執行時間: 9ms
2025-06-13 16:43:35 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@296bbe9c 執行時間: 10ms
2025-06-13 16:43:35 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 16:43:35 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 16:43:35 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@70c43f7d] 執行時間: 4ms
2025-06-13 16:43:35 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@70c43f7d] 執行時間: 5ms
2025-06-13 16:43:35 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 16:43:35 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@408ccb6b, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 16:43:35 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@cdf10b5, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 16:43:35 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 20ms
2025-06-13 16:43:35 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 20ms
2025-06-13 16:43:35 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=51, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@3757a9dd, com.chenhao.springmall.model.Product@a689c, com.chenhao.springmall.model.Product@4930350e, com.chenhao.springmall.model.Product@7ef39276, com.chenhao.springmall.model.Product@74e0d534, com.chenhao.springmall.model.Product@27fd0dbc, com.chenhao.springmall.model.Product@6fadc408, com.chenhao.springmall.model.Product@daf8ba9, com.chenhao.springmall.model.Product@7f14b65d, com.chenhao.springmall.model.Product@30cbd4ee, com.chenhao.springmall.model.Product@3147cb7b, com.chenhao.springmall.model.Product@40c4ec39]},[]> 執行時間: 21ms
2025-06-13 16:43:37 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showEditProductPage() 參數: [3, {}]
2025-06-13 16:43:37 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProductById() 參數: [3]
2025-06-13 16:43:37 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findById() 參數: [3]
2025-06-13 16:43:37 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findById() 返回值: Optional[com.chenhao.springmall.model.Product@36df3d10] 執行時間: 16ms
2025-06-13 16:43:37 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProductById() 返回值: com.chenhao.springmall.model.Product@36df3d10 執行時間: 18ms
2025-06-13 16:43:37 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showEditProductPage() 返回值: product-update 執行時間: 18ms
2025-06-13 16:43:38 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 16:43:38 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@5b52cdb1, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 16:43:38 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@46735422, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 16:43:38 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 16:43:38 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 16:43:38 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 10ms
2025-06-13 16:43:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 16:43:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 16:43:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@75bdfa8e 執行時間: 4ms
2025-06-13 16:43:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@75bdfa8e 執行時間: 4ms
2025-06-13 16:43:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 16:43:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 16:43:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@162ce054] 執行時間: 2ms
2025-06-13 16:43:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@162ce054] 執行時間: 2ms
2025-06-13 16:43:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 16:43:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@dc6530e, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 16:43:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@30c138a5, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 16:43:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 16:43:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 10ms
2025-06-13 16:43:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=51, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@96bf664, com.chenhao.springmall.model.Product@2868cb31, com.chenhao.springmall.model.Product@1c17d2dd, com.chenhao.springmall.model.Product@2d33d959, com.chenhao.springmall.model.Product@7bbdd24d, com.chenhao.springmall.model.Product@1562af48, com.chenhao.springmall.model.Product@37c10603, com.chenhao.springmall.model.Product@48bf8b3, com.chenhao.springmall.model.Product@11316dd5, com.chenhao.springmall.model.Product@11a98854, com.chenhao.springmall.model.Product@2ee7657c, com.chenhao.springmall.model.Product@75f25e73]},[]> 執行時間: 10ms
2025-06-13 16:44:28 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberController.loginPage() 參數: [{}]
2025-06-13 16:44:28 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberController.loginPage() 返回值: login 執行時間: 0ms
2025-06-13 16:44:30 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: AuthController.login() 參數: [LoginRequest(email=test1@com.tw, password=111)]
2025-06-13 16:44:30 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 16:44:30 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 16:44:30 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@5479c027 執行時間: 10ms
2025-06-13 16:44:30 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@5479c027 執行時間: 11ms
2025-06-13 16:44:30 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 16:44:30 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 16:44:30 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@27159774] 執行時間: 3ms
2025-06-13 16:44:30 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@27159774] 執行時間: 3ms
2025-06-13 16:44:30 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 16:44:30 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 16:44:30 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@5479c027 執行時間: 4ms
2025-06-13 16:44:30 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@5479c027 執行時間: 4ms
2025-06-13 16:44:30 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 16:44:30 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 16:44:30 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@27159774] 執行時間: 2ms
2025-06-13 16:44:30 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@27159774] 執行時間: 2ms
2025-06-13 16:44:30 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: AuthController.login() 返回值: <200 OK OK,{token=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0MUBjb20udHciLCJyb2xlcyI6WyJST0xFX0FETUlOIl0sImlhdCI6MTc0OTgwNDI3MCwiZXhwIjoxNzQ5ODkwNjcwfQ.D_LRSLqUDhC9l5Nz65sBHLuupEJ5ah1yrd3rrqfJeTM},[]> 執行時間: 136ms
2025-06-13 16:44:30 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 16:44:30 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@546e93f6, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 16:44:30 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@32b6ddc7, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 16:44:30 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 11ms
2025-06-13 16:44:30 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 13ms
2025-06-13 16:44:30 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 13ms
2025-06-13 16:44:30 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 16:44:30 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 16:44:30 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@4256a9e 執行時間: 6ms
2025-06-13 16:44:30 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@4256a9e 執行時間: 7ms
2025-06-13 16:44:30 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 16:44:30 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 16:44:30 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@785e594c] 執行時間: 3ms
2025-06-13 16:44:30 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@785e594c] 執行時間: 3ms
2025-06-13 16:44:30 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 16:44:30 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@24e15286, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 16:44:30 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@1cb4a121, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 16:44:30 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 16ms
2025-06-13 16:44:30 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 16ms
2025-06-13 16:44:30 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=51, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@155594c8, com.chenhao.springmall.model.Product@51998e64, com.chenhao.springmall.model.Product@3343ac56, com.chenhao.springmall.model.Product@1ac4f378, com.chenhao.springmall.model.Product@230ed73c, com.chenhao.springmall.model.Product@3ef99797, com.chenhao.springmall.model.Product@10f6ad02, com.chenhao.springmall.model.Product@2d94c357, com.chenhao.springmall.model.Product@787646ee, com.chenhao.springmall.model.Product@ac12358, com.chenhao.springmall.model.Product@2ffa11bf, com.chenhao.springmall.model.Product@24ffe16c]},[]> 執行時間: 16ms
2025-06-13 17:00:33 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showEditProductPage() 參數: [1, {}]
2025-06-13 17:00:33 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProductById() 參數: [1]
2025-06-13 17:00:33 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findById() 參數: [1]
2025-06-13 17:00:33 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findById() 返回值: Optional[com.chenhao.springmall.model.Product@731a7cbc] 執行時間: 15ms
2025-06-13 17:00:33 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProductById() 返回值: com.chenhao.springmall.model.Product@731a7cbc 執行時間: 16ms
2025-06-13 17:00:33 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showEditProductPage() 返回值: product-update 執行時間: 16ms
2025-06-13 17:00:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 17:00:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@436de866, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:00:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@3b2ca2fa, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:00:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 17ms
2025-06-13 17:00:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 18ms
2025-06-13 17:00:39 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 19ms
2025-06-13 17:00:39 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:00:39 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:00:39 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@463853f0 執行時間: 6ms
2025-06-13 17:00:39 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@463853f0 執行時間: 7ms
2025-06-13 17:00:39 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:00:39 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:00:39 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@6b7e27f5] 執行時間: 3ms
2025-06-13 17:00:39 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@6b7e27f5] 執行時間: 3ms
2025-06-13 17:00:39 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 17:00:39 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@13e4b857, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:00:39 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@2ff1c9ff, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:00:39 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 17:00:39 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 11ms
2025-06-13 17:00:39 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=51, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@55cace61, com.chenhao.springmall.model.Product@52891efc, com.chenhao.springmall.model.Product@b153c03, com.chenhao.springmall.model.Product@4193d600, com.chenhao.springmall.model.Product@4229b195, com.chenhao.springmall.model.Product@584d29d2, com.chenhao.springmall.model.Product@7a9ae3fc, com.chenhao.springmall.model.Product@25e60979, com.chenhao.springmall.model.Product@2acca149, com.chenhao.springmall.model.Product@1b7e1e7b, com.chenhao.springmall.model.Product@36d68beb, com.chenhao.springmall.model.Product@23eef189]},[]> 執行時間: 11ms
2025-06-13 17:00:41 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showEditProductPage() 參數: [8, {}]
2025-06-13 17:00:41 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProductById() 參數: [8]
2025-06-13 17:00:41 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findById() 參數: [8]
2025-06-13 17:00:41 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findById() 返回值: Optional[com.chenhao.springmall.model.Product@5f82f7b3] 執行時間: 7ms
2025-06-13 17:00:41 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProductById() 返回值: com.chenhao.springmall.model.Product@5f82f7b3 執行時間: 7ms
2025-06-13 17:00:41 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showEditProductPage() 返回值: product-update 執行時間: 8ms
2025-06-13 17:03:42 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.updateProduct() 參數: [8, com.chenhao.springmall.dto.ProductRequest@3216ac44]
2025-06-13 17:03:42 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.updateProduct() 參數: [8, com.chenhao.springmall.dto.ProductRequest@3216ac44]
2025-06-13 17:03:42 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findById() 參數: [8]
2025-06-13 17:03:42 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findById() 返回值: Optional[com.chenhao.springmall.model.Product@1042f2e8] 執行時間: 4ms
2025-06-13 17:03:42 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.save() 參數: [com.chenhao.springmall.model.Product@1042f2e8]
2025-06-13 17:03:42 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.save() 返回值: com.chenhao.springmall.model.Product@1042f2e8 執行時間: 9ms
2025-06-13 17:03:42 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.updateProduct() 返回值: com.chenhao.springmall.model.Product@1042f2e8 執行時間: 16ms
2025-06-13 17:03:42 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.updateProduct() 返回值: <200 OK OK,com.chenhao.springmall.model.Product@1042f2e8,[]> 執行時間: 86ms
2025-06-13 17:03:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 17:03:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@18d6e85, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:03:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@52d5ef14, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:03:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 13ms
2025-06-13 17:03:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 13ms
2025-06-13 17:03:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 15ms
2025-06-13 17:03:44 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:03:44 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:03:44 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@4ac69ed 執行時間: 5ms
2025-06-13 17:03:44 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@4ac69ed 執行時間: 5ms
2025-06-13 17:03:44 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:03:44 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:03:44 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3356c0d1] 執行時間: 4ms
2025-06-13 17:03:44 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3356c0d1] 執行時間: 4ms
2025-06-13 17:03:44 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 17:03:44 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@535673e6, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:03:44 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@3391e0ae, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:03:44 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 11ms
2025-06-13 17:03:44 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 11ms
2025-06-13 17:03:44 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=51, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@9b18774, com.chenhao.springmall.model.Product@c04f3a5, com.chenhao.springmall.model.Product@34d4a0d5, com.chenhao.springmall.model.Product@3a402b4b, com.chenhao.springmall.model.Product@3fcf8150, com.chenhao.springmall.model.Product@14fdc4d7, com.chenhao.springmall.model.Product@53e0c95, com.chenhao.springmall.model.Product@3e1f750a, com.chenhao.springmall.model.Product@7d99a698, com.chenhao.springmall.model.Product@7381e80, com.chenhao.springmall.model.Product@7217f056, com.chenhao.springmall.model.Product@37e57c3b]},[]> 執行時間: 11ms
2025-06-13 17:03:46 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:03:46 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:03:46 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@206139bc 執行時間: 7ms
2025-06-13 17:03:46 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@206139bc 執行時間: 8ms
2025-06-13 17:03:46 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:03:46 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:03:46 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@49c8aba8] 執行時間: 3ms
2025-06-13 17:03:46 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@49c8aba8] 執行時間: 3ms
2025-06-13 17:03:46 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 4, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 17:03:46 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@6ec9ce04, Page request [number: 4, size 12, sort: UNSORTED]]
2025-06-13 17:03:46 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@5591272a, Page request [number: 4, size 12, sort: UNSORTED]]
2025-06-13 17:03:46 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 5 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 17:03:46 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 5 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 17:03:46 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=51, totalPages=5, currentPage=4, products=[com.chenhao.springmall.model.Product@3bb8917f, com.chenhao.springmall.model.Product@7fee432b, com.chenhao.springmall.model.Product@136126c1]},[]> 執行時間: 6ms
2025-06-13 17:04:00 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:04:00 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:04:00 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@73e03d7b 執行時間: 6ms
2025-06-13 17:04:00 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@73e03d7b 執行時間: 6ms
2025-06-13 17:04:00 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:04:00 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:04:00 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@367563e2] 執行時間: 2ms
2025-06-13 17:04:00 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@367563e2] 執行時間: 2ms
2025-06-13 17:04:00 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 17:04:00 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@2bbbd8c2, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:04:00 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@3350b5cd, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:04:00 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 17:04:00 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 17:04:00 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=51, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@4e422a6f, com.chenhao.springmall.model.Product@18907fe5, com.chenhao.springmall.model.Product@728eaaff, com.chenhao.springmall.model.Product@4357bcbb, com.chenhao.springmall.model.Product@1c99f7ec, com.chenhao.springmall.model.Product@76ddccd, com.chenhao.springmall.model.Product@33578d, com.chenhao.springmall.model.Product@7e7f9154, com.chenhao.springmall.model.Product@2d0a2fe0, com.chenhao.springmall.model.Product@44e81538, com.chenhao.springmall.model.Product@5e7dad17, com.chenhao.springmall.model.Product@5c0a62bd]},[]> 執行時間: 10ms
2025-06-13 17:04:08 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:04:08 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:04:08 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@709fb629 執行時間: 4ms
2025-06-13 17:04:08 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@709fb629 執行時間: 5ms
2025-06-13 17:04:08 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:04:08 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:04:08 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5ffd9f92] 執行時間: 2ms
2025-06-13 17:04:08 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5ffd9f92] 執行時間: 3ms
2025-06-13 17:04:08 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showNewProductPage() 參數: [{}]
2025-06-13 17:04:08 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showNewProductPage() 返回值: product-form 執行時間: 0ms
2025-06-13 17:04:08 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showNewProductPage() 參數: [{}]
2025-06-13 17:04:08 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showNewProductPage() 返回值: product-form 執行時間: 0ms
2025-06-13 17:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 17:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@56756174, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@3598d9b8, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 10ms
2025-06-13 17:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 10ms
2025-06-13 17:04:12 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 10ms
2025-06-13 17:04:12 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:04:12 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:04:12 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@28ad0d8 執行時間: 3ms
2025-06-13 17:04:12 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@28ad0d8 執行時間: 4ms
2025-06-13 17:04:12 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:04:12 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:04:12 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@471aa393] 執行時間: 1ms
2025-06-13 17:04:12 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@471aa393] 執行時間: 2ms
2025-06-13 17:04:12 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 17:04:12 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@7cab1121, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:04:12 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@6d094f03, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:04:12 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 14ms
2025-06-13 17:04:12 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 14ms
2025-06-13 17:04:12 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=51, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@311daab2, com.chenhao.springmall.model.Product@31811152, com.chenhao.springmall.model.Product@38bcfbc0, com.chenhao.springmall.model.Product@5cdd532, com.chenhao.springmall.model.Product@5959a703, com.chenhao.springmall.model.Product@606b36fb, com.chenhao.springmall.model.Product@3fd6b3cd, com.chenhao.springmall.model.Product@54d99540, com.chenhao.springmall.model.Product@40ac4167, com.chenhao.springmall.model.Product@79c97b67, com.chenhao.springmall.model.Product@730bf748, com.chenhao.springmall.model.Product@6be01ffc]},[]> 執行時間: 14ms
2025-06-13 17:04:17 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showEditProductPage() 參數: [8, {}]
2025-06-13 17:04:17 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProductById() 參數: [8]
2025-06-13 17:04:17 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findById() 參數: [8]
2025-06-13 17:04:17 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findById() 返回值: Optional[com.chenhao.springmall.model.Product@127eebea] 執行時間: 5ms
2025-06-13 17:04:17 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProductById() 返回值: com.chenhao.springmall.model.Product@127eebea 執行時間: 5ms
2025-06-13 17:04:17 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showEditProductPage() 返回值: product-update 執行時間: 5ms
2025-06-13 17:04:22 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.updateProduct() 參數: [8, com.chenhao.springmall.dto.ProductRequest@4379e7]
2025-06-13 17:04:22 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.updateProduct() 參數: [8, com.chenhao.springmall.dto.ProductRequest@4379e7]
2025-06-13 17:04:22 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findById() 參數: [8]
2025-06-13 17:04:22 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findById() 返回值: Optional[com.chenhao.springmall.model.Product@7b745c1a] 執行時間: 2ms
2025-06-13 17:04:22 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.save() 參數: [com.chenhao.springmall.model.Product@7b745c1a]
2025-06-13 17:04:22 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.save() 返回值: com.chenhao.springmall.model.Product@7b745c1a 執行時間: 1ms
2025-06-13 17:04:22 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.updateProduct() 返回值: com.chenhao.springmall.model.Product@7b745c1a 執行時間: 3ms
2025-06-13 17:04:22 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.updateProduct() 返回值: <200 OK OK,com.chenhao.springmall.model.Product@7b745c1a,[]> 執行時間: 71ms
2025-06-13 17:04:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 17:04:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@21e4d206, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:04:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@7113311a, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:04:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 17:04:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 17:04:24 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 9ms
2025-06-13 17:04:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:04:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:04:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@47849605 執行時間: 4ms
2025-06-13 17:04:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@47849605 執行時間: 4ms
2025-06-13 17:04:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:04:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:04:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@16e648ba] 執行時間: 2ms
2025-06-13 17:04:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@16e648ba] 執行時間: 3ms
2025-06-13 17:04:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 17:04:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@22799b76, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:04:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@5b4c8e8a, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:04:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 7ms
2025-06-13 17:04:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 7ms
2025-06-13 17:04:24 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=51, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@621f55f5, com.chenhao.springmall.model.Product@5c5cf078, com.chenhao.springmall.model.Product@6c118b25, com.chenhao.springmall.model.Product@298f1b11, com.chenhao.springmall.model.Product@31275328, com.chenhao.springmall.model.Product@ac3ba44, com.chenhao.springmall.model.Product@6aeb509a, com.chenhao.springmall.model.Product@3bed9945, com.chenhao.springmall.model.Product@30583303, com.chenhao.springmall.model.Product@275ebed6, com.chenhao.springmall.model.Product@17015527, com.chenhao.springmall.model.Product@4071c133]},[]> 執行時間: 8ms
2025-06-13 17:04:41 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showEditProductPage() 參數: [8, {}]
2025-06-13 17:04:41 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProductById() 參數: [8]
2025-06-13 17:04:41 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findById() 參數: [8]
2025-06-13 17:04:41 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findById() 返回值: Optional[com.chenhao.springmall.model.Product@1270d658] 執行時間: 7ms
2025-06-13 17:04:41 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProductById() 返回值: com.chenhao.springmall.model.Product@1270d658 執行時間: 7ms
2025-06-13 17:04:41 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showEditProductPage() 返回值: product-update 執行時間: 7ms
2025-06-13 17:04:47 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 17:04:47 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@30bd9cd3, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:04:47 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@787ff89f, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:04:47 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 14ms
2025-06-13 17:04:47 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 16ms
2025-06-13 17:04:47 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 17ms
2025-06-13 17:04:47 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:04:47 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:04:47 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@12dec3e9 執行時間: 5ms
2025-06-13 17:04:47 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@12dec3e9 執行時間: 6ms
2025-06-13 17:04:47 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:04:47 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:04:47 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5adf5fdb] 執行時間: 3ms
2025-06-13 17:04:47 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5adf5fdb] 執行時間: 3ms
2025-06-13 17:04:47 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 17:04:47 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@2c146729, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:04:47 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@1108562d, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:04:47 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 12ms
2025-06-13 17:04:47 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 13ms
2025-06-13 17:04:47 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=51, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@1d63e9ec, com.chenhao.springmall.model.Product@6a10d379, com.chenhao.springmall.model.Product@78e59d27, com.chenhao.springmall.model.Product@2d1e0758, com.chenhao.springmall.model.Product@2f30a79e, com.chenhao.springmall.model.Product@4357321a, com.chenhao.springmall.model.Product@178f83f2, com.chenhao.springmall.model.Product@4a76629c, com.chenhao.springmall.model.Product@60d0201b, com.chenhao.springmall.model.Product@1a6d09f9, com.chenhao.springmall.model.Product@71968955, com.chenhao.springmall.model.Product@88d6779]},[]> 執行時間: 13ms
2025-06-13 17:04:52 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:04:52 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:04:52 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@355b3ca 執行時間: 5ms
2025-06-13 17:04:52 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@355b3ca 執行時間: 5ms
2025-06-13 17:04:52 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:04:52 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:04:52 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@36112fc9] 執行時間: 2ms
2025-06-13 17:04:52 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@36112fc9] 執行時間: 2ms
2025-06-13 17:04:52 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showNewProductPage() 參數: [{}]
2025-06-13 17:04:52 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showNewProductPage() 返回值: product-form 執行時間: 0ms
2025-06-13 17:04:52 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showNewProductPage() 參數: [{}]
2025-06-13 17:04:52 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showNewProductPage() 返回值: product-form 執行時間: 0ms
2025-06-13 17:06:15 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showNewProductPage() 參數: [{}]
2025-06-13 17:06:15 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showNewProductPage() 返回值: product-form 執行時間: 0ms
2025-06-13 17:06:15 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.redirectToProducts() 參數: []
2025-06-13 17:06:15 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.redirectToProducts() 返回值: redirect:/products 執行時間: 0ms
2025-06-13 17:06:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 17:06:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@18a990ea, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:06:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@4fc3cca3, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:06:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 11ms
2025-06-13 17:06:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 17 containing com.chenhao.springmall.model.Product instances 執行時間: 12ms
2025-06-13 17:06:15 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 13ms
2025-06-13 17:06:19 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.createProduct() 參數: [com.chenhao.springmall.dto.ProductRequest@2bbed001]
2025-06-13 17:06:19 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.createProduct() 參數: [com.chenhao.springmall.dto.ProductRequest@2bbed001]
2025-06-13 17:06:19 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.save() 參數: [com.chenhao.springmall.model.Product@b1e50d3]
2025-06-13 17:06:19 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.save() 返回值: com.chenhao.springmall.model.Product@b1e50d3 執行時間: 29ms
2025-06-13 17:06:19 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.createProduct() 返回值: 61 執行時間: 30ms
2025-06-13 17:06:19 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProductById() 參數: [61]
2025-06-13 17:06:19 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findById() 參數: [61]
2025-06-13 17:06:19 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findById() 返回值: Optional[com.chenhao.springmall.model.Product@b1e50d3] 執行時間: 4ms
2025-06-13 17:06:19 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProductById() 返回值: com.chenhao.springmall.model.Product@b1e50d3 執行時間: 4ms
2025-06-13 17:06:19 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.createProduct() 返回值: <201 CREATED Created,com.chenhao.springmall.model.Product@b1e50d3,[]> 執行時間: 93ms
2025-06-13 17:06:21 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 17:06:21 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@22a54ede, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:06:21 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@5cd8ffbb, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:06:21 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 18 containing com.chenhao.springmall.model.Product instances 執行時間: 11ms
2025-06-13 17:06:21 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 18 containing com.chenhao.springmall.model.Product instances 執行時間: 11ms
2025-06-13 17:06:21 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 11ms
2025-06-13 17:06:21 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:06:21 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:06:21 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@10d5c0b7 執行時間: 5ms
2025-06-13 17:06:21 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@10d5c0b7 執行時間: 6ms
2025-06-13 17:06:21 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:06:21 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:06:21 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@749ecb2b] 執行時間: 6ms
2025-06-13 17:06:21 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@749ecb2b] 執行時間: 6ms
2025-06-13 17:06:21 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 17:06:21 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@2ac43432, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:06:21 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@3f4e2d2c, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:06:21 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 13ms
2025-06-13 17:06:21 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 15ms
2025-06-13 17:06:21 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=52, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@25fb2094, com.chenhao.springmall.model.Product@5f6bfffb, com.chenhao.springmall.model.Product@4fe4a3c5, com.chenhao.springmall.model.Product@37986bec, com.chenhao.springmall.model.Product@4b9b020b, com.chenhao.springmall.model.Product@4b8fb8a4, com.chenhao.springmall.model.Product@219fd09b, com.chenhao.springmall.model.Product@552c184f, com.chenhao.springmall.model.Product@4634c3bb, com.chenhao.springmall.model.Product@70c80941, com.chenhao.springmall.model.Product@2f0c14cb, com.chenhao.springmall.model.Product@1ad78f05]},[]> 執行時間: 15ms
2025-06-13 17:06:26 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:06:26 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:06:26 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@78041bfe 執行時間: 6ms
2025-06-13 17:06:26 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@78041bfe 執行時間: 6ms
2025-06-13 17:06:26 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:06:26 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:06:26 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@506a885f] 執行時間: 3ms
2025-06-13 17:06:26 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@506a885f] 執行時間: 3ms
2025-06-13 17:06:26 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 4, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 17:06:26 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@8cb4ce2, Page request [number: 4, size 12, sort: UNSORTED]]
2025-06-13 17:06:26 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@2598970e, Page request [number: 4, size 12, sort: UNSORTED]]
2025-06-13 17:06:26 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 5 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 17:06:26 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 5 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 17:06:26 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=52, totalPages=5, currentPage=4, products=[com.chenhao.springmall.model.Product@19f6ed12, com.chenhao.springmall.model.Product@5b7cc8af, com.chenhao.springmall.model.Product@19820d45, com.chenhao.springmall.model.Product@4fa8a6ed]},[]> 執行時間: 5ms
2025-06-13 17:06:53 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 17:06:53 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@7ff07a67, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:06:53 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@468ffd13, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:06:53 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 18 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 17:06:53 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 18 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 17:06:53 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 9ms
2025-06-13 17:06:53 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:06:53 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:06:53 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@400ddda2 執行時間: 7ms
2025-06-13 17:06:53 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@400ddda2 執行時間: 7ms
2025-06-13 17:06:53 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:06:53 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:06:53 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2a4a7e5c] 執行時間: 3ms
2025-06-13 17:06:53 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2a4a7e5c] 執行時間: 3ms
2025-06-13 17:06:53 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 17:06:53 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@6290a79f, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:06:53 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@418094f4, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:06:53 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 17:06:53 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 17:06:53 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=52, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@60507fff, com.chenhao.springmall.model.Product@4659ef5, com.chenhao.springmall.model.Product@4b0fb544, com.chenhao.springmall.model.Product@6837410, com.chenhao.springmall.model.Product@65cf4cb8, com.chenhao.springmall.model.Product@4df5e4c2, com.chenhao.springmall.model.Product@7b66cdad, com.chenhao.springmall.model.Product@66d80525, com.chenhao.springmall.model.Product@796d2fca, com.chenhao.springmall.model.Product@1bdc07d1, com.chenhao.springmall.model.Product@561aaaa2, com.chenhao.springmall.model.Product@704d6c69]},[]> 執行時間: 8ms
2025-06-13 17:15:34 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:34 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:34 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@634d99c0 執行時間: 17ms
2025-06-13 17:15:34 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@634d99c0 執行時間: 17ms
2025-06-13 17:15:34 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:15:34 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:15:34 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@689bb4b1] 執行時間: 4ms
2025-06-13 17:15:34 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@689bb4b1] 執行時間: 5ms
2025-06-13 17:15:34 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [FOOD, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 17:15:34 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@5ccaf7be, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:15:34 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@5f5333e9, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:15:34 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 15ms
2025-06-13 17:15:34 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 4 containing com.chenhao.springmall.model.Product instances 執行時間: 15ms
2025-06-13 17:15:34 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=46, totalPages=4, currentPage=0, products=[com.chenhao.springmall.model.Product@2c1c7d02, com.chenhao.springmall.model.Product@527101c4, com.chenhao.springmall.model.Product@4589a80d, com.chenhao.springmall.model.Product@42a81cb2, com.chenhao.springmall.model.Product@d139d88, com.chenhao.springmall.model.Product@57b6d2cf, com.chenhao.springmall.model.Product@5ff7d1f4, com.chenhao.springmall.model.Product@5d380b34, com.chenhao.springmall.model.Product@4cd622c6, com.chenhao.springmall.model.Product@2d17a139, com.chenhao.springmall.model.Product@4c0ebd1e, com.chenhao.springmall.model.Product@51f26e00]},[]> 執行時間: 16ms
2025-06-13 17:15:35 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:35 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:35 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@1baf0c3 執行時間: 4ms
2025-06-13 17:15:35 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@1baf0c3 執行時間: 4ms
2025-06-13 17:15:35 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:15:35 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:15:35 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3d4db98] 執行時間: 2ms
2025-06-13 17:15:35 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@3d4db98] 執行時間: 2ms
2025-06-13 17:15:35 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [TOY, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 17:15:35 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@4fed1680, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:15:35 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@4ee5c01, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:15:35 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 17:15:35 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 17:15:35 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=2, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@2ba4180e, com.chenhao.springmall.model.Product@3f939c66]},[]> 執行時間: 4ms
2025-06-13 17:15:37 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:37 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:37 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@2d4afb7d 執行時間: 4ms
2025-06-13 17:15:37 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@2d4afb7d 執行時間: 4ms
2025-06-13 17:15:37 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:15:37 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:15:37 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@ea889fc] 執行時間: 2ms
2025-06-13 17:15:37 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@ea889fc] 執行時間: 2ms
2025-06-13 17:15:37 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [E_BOOK, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 17:15:37 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@61d391a0, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:15:37 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@3c31bf09, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:15:37 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 4ms
2025-06-13 17:15:37 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 1 containing com.chenhao.springmall.model.Product instances 執行時間: 5ms
2025-06-13 17:15:37 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=4, totalPages=1, currentPage=0, products=[com.chenhao.springmall.model.Product@4ed9cd9f, com.chenhao.springmall.model.Product@2f74c49a, com.chenhao.springmall.model.Product@5910d7f6, com.chenhao.springmall.model.Product@63cd5de]},[]> 執行時間: 5ms
2025-06-13 17:15:38 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:38 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:38 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@27f25b10 執行時間: 4ms
2025-06-13 17:15:38 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@27f25b10 執行時間: 4ms
2025-06-13 17:15:38 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:15:38 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:15:38 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@1a00ad8c] 執行時間: 2ms
2025-06-13 17:15:38 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@1a00ad8c] 執行時間: 2ms
2025-06-13 17:15:38 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 17:15:38 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@377f2d89, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:15:38 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@25de63be, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:15:38 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 17:15:38 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 17:15:38 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=52, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@76f3a59f, com.chenhao.springmall.model.Product@70314b6, com.chenhao.springmall.model.Product@269e3311, com.chenhao.springmall.model.Product@78034ff0, com.chenhao.springmall.model.Product@13b7d232, com.chenhao.springmall.model.Product@c0ec256, com.chenhao.springmall.model.Product@5b5f6e7d, com.chenhao.springmall.model.Product@39c1c629, com.chenhao.springmall.model.Product@14caa561, com.chenhao.springmall.model.Product@6e2cc9dc, com.chenhao.springmall.model.Product@4e207ee2, com.chenhao.springmall.model.Product@79e71981]},[]> 執行時間: 9ms
2025-06-13 17:15:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showEditProductPage() 參數: [1, {}]
2025-06-13 17:15:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProductById() 參數: [1]
2025-06-13 17:15:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findById() 參數: [1]
2025-06-13 17:15:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findById() 返回值: Optional[com.chenhao.springmall.model.Product@7be15f3a] 執行時間: 5ms
2025-06-13 17:15:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProductById() 返回值: com.chenhao.springmall.model.Product@7be15f3a 執行時間: 5ms
2025-06-13 17:15:40 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showEditProductPage() 返回值: product-update 執行時間: 5ms
2025-06-13 17:15:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 17:15:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@7b9ceb64, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:15:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@6d40df1c, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:15:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 18 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 17:15:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 18 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 17:15:41 [http-nio-8080-exec-8] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 10ms
2025-06-13 17:15:41 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:41 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:41 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@6d83556d 執行時間: 3ms
2025-06-13 17:15:41 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@6d83556d 執行時間: 5ms
2025-06-13 17:15:41 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:15:41 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:15:41 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@707ed1b] 執行時間: 3ms
2025-06-13 17:15:41 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@707ed1b] 執行時間: 3ms
2025-06-13 17:15:41 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 17:15:41 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@d02263e, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:15:41 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@3549f4f3, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:15:41 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 17:15:41 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 17:15:41 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=52, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@5f788342, com.chenhao.springmall.model.Product@3f6fe46d, com.chenhao.springmall.model.Product@52ab2ff, com.chenhao.springmall.model.Product@1266e55a, com.chenhao.springmall.model.Product@99f16c7, com.chenhao.springmall.model.Product@4913c715, com.chenhao.springmall.model.Product@19fe3982, com.chenhao.springmall.model.Product@3c9743d2, com.chenhao.springmall.model.Product@4dcf43a9, com.chenhao.springmall.model.Product@1a330e6a, com.chenhao.springmall.model.Product@72e90687, com.chenhao.springmall.model.Product@74e652db]},[]> 執行時間: 10ms
2025-06-13 17:15:42 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:42 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:42 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@6730c809 執行時間: 4ms
2025-06-13 17:15:42 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@6730c809 執行時間: 4ms
2025-06-13 17:15:42 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:15:42 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:15:42 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@42d6ae88] 執行時間: 1ms
2025-06-13 17:15:42 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@42d6ae88] 執行時間: 2ms
2025-06-13 17:15:42 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showNewProductPage() 參數: [{}]
2025-06-13 17:15:42 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showNewProductPage() 返回值: product-form 執行時間: 0ms
2025-06-13 17:15:42 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showNewProductPage() 參數: [{}]
2025-06-13 17:15:42 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showNewProductPage() 返回值: product-form 執行時間: 0ms
2025-06-13 17:15:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 17:15:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@30d26578, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:15:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@73ea2b96, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:15:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 18 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 17:15:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 18 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 17:15:45 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 8ms
2025-06-13 17:15:45 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:45 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:45 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@2ea929e4 執行時間: 5ms
2025-06-13 17:15:45 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@2ea929e4 執行時間: 6ms
2025-06-13 17:15:45 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:15:45 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:15:45 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@38f37702] 執行時間: 2ms
2025-06-13 17:15:45 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@38f37702] 執行時間: 2ms
2025-06-13 17:15:45 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 17:15:45 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@2974d73f, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:15:45 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@79bbdb7e, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:15:45 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 17:15:45 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 17:15:45 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=52, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@60b6d1d9, com.chenhao.springmall.model.Product@2dc2479a, com.chenhao.springmall.model.Product@5590c434, com.chenhao.springmall.model.Product@30689d4f, com.chenhao.springmall.model.Product@6606ba82, com.chenhao.springmall.model.Product@5947df4f, com.chenhao.springmall.model.Product@aa51137, com.chenhao.springmall.model.Product@7e5367c9, com.chenhao.springmall.model.Product@2dd2002b, com.chenhao.springmall.model.Product@4a880f79, com.chenhao.springmall.model.Product@680683b6, com.chenhao.springmall.model.Product@d0edc50]},[]> 執行時間: 9ms
2025-06-13 17:15:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showEditProductPage() 參數: [1, {}]
2025-06-13 17:15:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProductById() 參數: [1]
2025-06-13 17:15:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findById() 參數: [1]
2025-06-13 17:15:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findById() 返回值: Optional[com.chenhao.springmall.model.Product@3cbebdf6] 執行時間: 4ms
2025-06-13 17:15:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProductById() 返回值: com.chenhao.springmall.model.Product@3cbebdf6 執行時間: 4ms
2025-06-13 17:15:46 [http-nio-8080-exec-4] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showEditProductPage() 返回值: product-update 執行時間: 4ms
2025-06-13 17:15:49 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 17:15:49 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@38743311, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:15:49 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@1d67e09b, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:15:49 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 18 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 17:15:49 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 18 containing com.chenhao.springmall.model.Product instances 執行時間: 9ms
2025-06-13 17:15:49 [http-nio-8080-exec-7] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 9ms
2025-06-13 17:15:49 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:49 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:49 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@821ce8d 執行時間: 3ms
2025-06-13 17:15:49 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@821ce8d 執行時間: 4ms
2025-06-13 17:15:49 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:15:49 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:15:49 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2dbe47c2] 執行時間: 1ms
2025-06-13 17:15:49 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@2dbe47c2] 執行時間: 2ms
2025-06-13 17:15:49 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 17:15:49 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@365e3e33, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:15:49 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@5a65bf67, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:15:49 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 17:15:49 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 17:15:49 [http-nio-8080-exec-6] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=52, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@6e992cc3, com.chenhao.springmall.model.Product@1080659, com.chenhao.springmall.model.Product@5d87a000, com.chenhao.springmall.model.Product@533f2b0b, com.chenhao.springmall.model.Product@7467ea9b, com.chenhao.springmall.model.Product@351c0080, com.chenhao.springmall.model.Product@55fb3183, com.chenhao.springmall.model.Product@7f363f44, com.chenhao.springmall.model.Product@34ce310b, com.chenhao.springmall.model.Product@61833f12, com.chenhao.springmall.model.Product@6df87d88, com.chenhao.springmall.model.Product@23fab36c]},[]> 執行時間: 8ms
2025-06-13 17:15:50 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:50 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:50 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@3b4cf235 執行時間: 3ms
2025-06-13 17:15:50 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@3b4cf235 執行時間: 4ms
2025-06-13 17:15:50 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:15:50 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:15:50 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@28dc4511] 執行時間: 1ms
2025-06-13 17:15:50 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@28dc4511] 執行時間: 1ms
2025-06-13 17:15:50 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showNewProductPage() 參數: [{}]
2025-06-13 17:15:50 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showNewProductPage() 返回值: product-form 執行時間: 0ms
2025-06-13 17:15:50 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showNewProductPage() 參數: [{}]
2025-06-13 17:15:50 [http-nio-8080-exec-2] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showNewProductPage() 返回值: product-form 執行時間: 0ms
2025-06-13 17:15:52 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.showProductsPage() 參數: [{}, null]
2025-06-13 17:15:52 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@69de190f, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:15:52 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@24b6a067, Page request [number: 0, size 3, sort: UNSORTED]]
2025-06-13 17:15:52 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 18 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 17:15:52 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 18 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 17:15:52 [http-nio-8080-exec-5] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.showProductsPage() 返回值: product-list 執行時間: 8ms
2025-06-13 17:15:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy142.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:15:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy142.findByEmail() 返回值: com.chenhao.springmall.model.Member@18ddd768 執行時間: 5ms
2025-06-13 17:15:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@18ddd768 執行時間: 5ms
2025-06-13 17:15:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:15:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy146.findRolesByMemberId() 參數: [1]
2025-06-13 17:15:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy146.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@6bcd8476] 執行時間: 1ms
2025-06-13 17:15:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@6bcd8476] 執行時間: 3ms
2025-06-13 17:15:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=55BF6C825B90AC69D0E173D9F474BF85], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 17:15:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@12f4cd4f, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:15:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy149.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$1871/0x0000025b53becea0@7540042c, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:15:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy149.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 17:15:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 8ms
2025-06-13 17:15:52 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=52, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@40cf82ff, com.chenhao.springmall.model.Product@a3200ec, com.chenhao.springmall.model.Product@73d4ec5, com.chenhao.springmall.model.Product@58ba5141, com.chenhao.springmall.model.Product@64dee8d3, com.chenhao.springmall.model.Product@7e71b1c4, com.chenhao.springmall.model.Product@13d783a9, com.chenhao.springmall.model.Product@19ede8cb, com.chenhao.springmall.model.Product@ae60355, com.chenhao.springmall.model.Product@796a7c5c, com.chenhao.springmall.model.Product@560f6213, com.chenhao.springmall.model.Product@20d273a9]},[]> 執行時間: 9ms
2025-06-13 17:30:42 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-06-13 17:30:42 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-06-13 17:30:42 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 17:30:42 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-13 17:30:42 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-13 17:30:53 [main] INFO  c.c.springmall.SpringMallApplication - Starting SpringMallApplication using Java 17.0.15 with PID 10368 (C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall\target\classes started by user1 in C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall)
2025-06-13 17:30:53 [main] DEBUG c.c.springmall.SpringMallApplication - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-13 17:30:53 [main] INFO  c.c.springmall.SpringMallApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-13 17:30:54 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-13 17:30:54 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 80 ms. Found 4 JPA repository interfaces.
2025-06-13 17:30:55 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-13 17:30:55 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-13 17:30:55 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-13 17:30:56 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-13 17:30:56 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2514 ms
2025-06-13 17:30:56 [main] DEBUG c.c.s.jwt.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-13 17:30:56 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-13 17:30:56 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1aed6f0b
2025-06-13 17:30:56 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-13 17:30:56 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-13 17:30:56 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.15.Final
2025-06-13 17:30:56 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-13 17:30:57 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-13 17:30:57 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0.22
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-13 17:30:58 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-13 17:30:58 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 17:30:58 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-13 17:30:59 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-13 17:30:59 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name myUserDetailsService
2025-06-13 17:31:00 [main] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-13 17:31:01 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-13 17:31:01 [main] INFO  c.c.springmall.SpringMallApplication - Started SpringMallApplication in 8.782 seconds (process running for 9.566)
2025-06-13 17:31:06 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-13 17:31:06 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-13 17:31:06 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-13 17:34:53 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-06-13 17:34:53 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-06-13 17:34:53 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 17:34:53 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-13 17:34:53 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-13 17:35:07 [main] INFO  c.c.springmall.SpringMallApplication - Starting SpringMallApplication using Java 17.0.15 with PID 11928 (C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall\target\classes started by user1 in C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall)
2025-06-13 17:35:07 [main] DEBUG c.c.springmall.SpringMallApplication - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-13 17:35:07 [main] INFO  c.c.springmall.SpringMallApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-13 17:35:08 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-13 17:35:08 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 76 ms. Found 4 JPA repository interfaces.
2025-06-13 17:35:09 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-13 17:35:09 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-13 17:35:09 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-13 17:35:09 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-13 17:35:09 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2259 ms
2025-06-13 17:35:09 [main] DEBUG c.c.s.jwt.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-13 17:35:10 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-13 17:35:10 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@12f51a65
2025-06-13 17:35:10 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-13 17:35:10 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-13 17:35:10 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.15.Final
2025-06-13 17:35:10 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-13 17:35:11 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-13 17:35:11 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0.22
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-13 17:35:12 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-13 17:35:12 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 17:35:12 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-13 17:35:13 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-13 17:35:13 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name myUserDetailsService
2025-06-13 17:35:13 [main] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-13 17:35:15 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-13 17:35:15 [main] INFO  c.c.springmall.SpringMallApplication - Started SpringMallApplication in 8.412 seconds (process running for 9.433)
2025-06-13 17:35:17 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-13 17:35:17 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-13 17:35:17 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-13 17:35:18 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 418 ms
2025-06-13 17:39:24 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-06-13 17:39:24 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-06-13 17:39:24 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 17:39:24 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-13 17:39:24 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-13 17:39:34 [main] INFO  c.c.springmall.SpringMallApplication - Starting SpringMallApplication using Java 17.0.15 with PID 13320 (C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall\target\classes started by user1 in C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall)
2025-06-13 17:39:34 [main] DEBUG c.c.springmall.SpringMallApplication - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-13 17:39:34 [main] INFO  c.c.springmall.SpringMallApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-13 17:39:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-13 17:39:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 95 ms. Found 4 JPA repository interfaces.
2025-06-13 17:39:37 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-13 17:39:37 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-13 17:39:37 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-13 17:39:37 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-13 17:39:37 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2979 ms
2025-06-13 17:39:38 [main] DEBUG c.c.s.jwt.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-13 17:39:38 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-13 17:39:38 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@3e39e0fb
2025-06-13 17:39:38 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-13 17:39:38 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-13 17:39:38 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.15.Final
2025-06-13 17:39:38 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-13 17:39:39 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-13 17:39:39 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0.22
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-13 17:39:40 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-13 17:39:40 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 17:39:40 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-13 17:39:41 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-13 17:39:41 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name myUserDetailsService
2025-06-13 17:39:42 [main] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-13 17:39:43 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-13 17:39:43 [main] INFO  c.c.springmall.SpringMallApplication - Started SpringMallApplication in 9.258 seconds (process running for 10.175)
2025-06-13 17:39:56 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-13 17:39:56 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-13 17:39:56 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-13 17:39:57 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 456 ms
2025-06-13 17:40:24 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: AuthController.login() 參數: [LoginRequest(email=test1@com.tw, password=111)]
2025-06-13 17:40:25 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:40:25 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:40:25 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.findByEmail() 返回值: com.chenhao.springmall.model.Member@570444a 執行時間: 164ms
2025-06-13 17:40:25 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@570444a 執行時間: 166ms
2025-06-13 17:40:25 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:40:25 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy148.findRolesByMemberId() 參數: [1]
2025-06-13 17:40:25 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy148.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@60d06174] 執行時間: 55ms
2025-06-13 17:40:25 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@60d06174] 執行時間: 56ms
2025-06-13 17:40:25 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:40:25 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:40:25 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.findByEmail() 返回值: com.chenhao.springmall.model.Member@570444a 執行時間: 4ms
2025-06-13 17:40:25 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@570444a 執行時間: 5ms
2025-06-13 17:40:25 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:40:25 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy148.findRolesByMemberId() 參數: [1]
2025-06-13 17:40:25 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy148.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@60d06174] 執行時間: 2ms
2025-06-13 17:40:25 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@60d06174] 執行時間: 2ms
2025-06-13 17:40:25 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: AuthController.login() 返回值: <200 OK OK,{token=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0MUBjb20udHciLCJyb2xlcyI6WyJST0xFX0FETUlOIl0sImlhdCI6MTc0OTgwNzYyNSwiZXhwIjoxNzQ5ODk0MDI1fQ.Czm44H_opU2N24PQinkrQ5nhV2PnMLOAIC_TaanbpaE},[]> 執行時間: 518ms
2025-06-13 17:43:17 [http-nio-8080-exec-6] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
io.jsonwebtoken.io.DecodingException: Illegal base64url character: ' '
	at io.jsonwebtoken.io.Base64.ctoi(Base64.java:221)
	at io.jsonwebtoken.io.Base64.decodeFast(Base64.java:270)
	at io.jsonwebtoken.io.Base64Decoder.decode(Base64Decoder.java:36)
	at io.jsonwebtoken.io.Base64Decoder.decode(Base64Decoder.java:23)
	at io.jsonwebtoken.io.ExceptionPropagatingDecoder.decode(ExceptionPropagatingDecoder.java:36)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:288)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.chenhao.springmall.jwt.JwtUtil.extractUsername(JwtUtil.java:49)
	at com.chenhao.springmall.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:39)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-13 17:43:19 [http-nio-8080-exec-8] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
io.jsonwebtoken.io.DecodingException: Illegal base64url character: ' '
	at io.jsonwebtoken.io.Base64.ctoi(Base64.java:221)
	at io.jsonwebtoken.io.Base64.decodeFast(Base64.java:270)
	at io.jsonwebtoken.io.Base64Decoder.decode(Base64Decoder.java:36)
	at io.jsonwebtoken.io.Base64Decoder.decode(Base64Decoder.java:23)
	at io.jsonwebtoken.io.ExceptionPropagatingDecoder.decode(ExceptionPropagatingDecoder.java:36)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:288)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.chenhao.springmall.jwt.JwtUtil.extractUsername(JwtUtil.java:49)
	at com.chenhao.springmall.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:39)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-13 17:43:26 [http-nio-8080-exec-9] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
io.jsonwebtoken.io.DecodingException: Illegal base64url character: ' '
	at io.jsonwebtoken.io.Base64.ctoi(Base64.java:221)
	at io.jsonwebtoken.io.Base64.decodeFast(Base64.java:270)
	at io.jsonwebtoken.io.Base64Decoder.decode(Base64Decoder.java:36)
	at io.jsonwebtoken.io.Base64Decoder.decode(Base64Decoder.java:23)
	at io.jsonwebtoken.io.ExceptionPropagatingDecoder.decode(ExceptionPropagatingDecoder.java:36)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:288)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.chenhao.springmall.jwt.JwtUtil.extractUsername(JwtUtil.java:49)
	at com.chenhao.springmall.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:39)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-13 17:43:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: AuthController.login() 參數: [LoginRequest(email=test1@com.tw, password=111)]
2025-06-13 17:43:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:43:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:43:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.findByEmail() 返回值: com.chenhao.springmall.model.Member@c9c657c 執行時間: 12ms
2025-06-13 17:43:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@c9c657c 執行時間: 12ms
2025-06-13 17:43:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:43:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy148.findRolesByMemberId() 參數: [1]
2025-06-13 17:43:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy148.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@4d88fb40] 執行時間: 4ms
2025-06-13 17:43:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@4d88fb40] 執行時間: 4ms
2025-06-13 17:43:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:43:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:43:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.findByEmail() 返回值: com.chenhao.springmall.model.Member@c9c657c 執行時間: 4ms
2025-06-13 17:43:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@c9c657c 執行時間: 4ms
2025-06-13 17:43:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:43:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy148.findRolesByMemberId() 參數: [1]
2025-06-13 17:43:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy148.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@4d88fb40] 執行時間: 2ms
2025-06-13 17:43:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@4d88fb40] 執行時間: 2ms
2025-06-13 17:43:44 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: AuthController.login() 返回值: <200 OK OK,{token=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0MUBjb20udHciLCJyb2xlcyI6WyJST0xFX0FETUlOIl0sImlhdCI6MTc0OTgwNzgyNCwiZXhwIjoxNzQ5ODk0MjI0fQ.uGHSN_xgU83vh4kUzyOzc3iBxOkqitA-QOKu0zBx4l8},[]> 執行時間: 140ms
2025-06-13 17:43:51 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:43:51 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:43:51 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.findByEmail() 返回值: com.chenhao.springmall.model.Member@122b7d70 執行時間: 49ms
2025-06-13 17:43:51 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@122b7d70 執行時間: 49ms
2025-06-13 17:43:51 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:43:51 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy148.findRolesByMemberId() 參數: [1]
2025-06-13 17:43:51 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy148.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5e1367ed] 執行時間: 42ms
2025-06-13 17:43:51 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@5e1367ed] 執行時間: 42ms
2025-06-13 17:43:51 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: AuthController.hello() 參數: []
2025-06-13 17:43:51 [http-nio-8080-exec-1] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: AuthController.hello() 返回值: JWT OK! 執行時間: 0ms
2025-06-13 17:44:48 [http-nio-8080-exec-5] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
io.jsonwebtoken.io.DecodingException: Illegal base64url character: ' '
	at io.jsonwebtoken.io.Base64.ctoi(Base64.java:221)
	at io.jsonwebtoken.io.Base64.decodeFast(Base64.java:270)
	at io.jsonwebtoken.io.Base64Decoder.decode(Base64Decoder.java:36)
	at io.jsonwebtoken.io.Base64Decoder.decode(Base64Decoder.java:23)
	at io.jsonwebtoken.io.ExceptionPropagatingDecoder.decode(ExceptionPropagatingDecoder.java:36)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:288)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.chenhao.springmall.jwt.JwtUtil.extractUsername(JwtUtil.java:49)
	at com.chenhao.springmall.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:39)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-13 17:45:24 [http-nio-8080-exec-8] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
io.jsonwebtoken.io.DecodingException: Illegal base64url character: ' '
	at io.jsonwebtoken.io.Base64.ctoi(Base64.java:221)
	at io.jsonwebtoken.io.Base64.decodeFast(Base64.java:270)
	at io.jsonwebtoken.io.Base64Decoder.decode(Base64Decoder.java:36)
	at io.jsonwebtoken.io.Base64Decoder.decode(Base64Decoder.java:23)
	at io.jsonwebtoken.io.ExceptionPropagatingDecoder.decode(ExceptionPropagatingDecoder.java:36)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:288)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.chenhao.springmall.jwt.JwtUtil.extractUsername(JwtUtil.java:49)
	at com.chenhao.springmall.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:39)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-13 17:45:36 [http-nio-8080-exec-10] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
io.jsonwebtoken.io.DecodingException: Illegal base64url character: ' '
	at io.jsonwebtoken.io.Base64.ctoi(Base64.java:221)
	at io.jsonwebtoken.io.Base64.decodeFast(Base64.java:270)
	at io.jsonwebtoken.io.Base64Decoder.decode(Base64Decoder.java:36)
	at io.jsonwebtoken.io.Base64Decoder.decode(Base64Decoder.java:23)
	at io.jsonwebtoken.io.ExceptionPropagatingDecoder.decode(ExceptionPropagatingDecoder.java:36)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:288)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.chenhao.springmall.jwt.JwtUtil.extractUsername(JwtUtil.java:49)
	at com.chenhao.springmall.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:39)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-13 17:47:55 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-06-13 17:47:55 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-06-13 17:47:55 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 17:47:55 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-13 17:47:55 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-13 17:48:06 [main] INFO  c.c.springmall.SpringMallApplication - Starting SpringMallApplication using Java 17.0.15 with PID 5532 (C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall\target\classes started by user1 in C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall)
2025-06-13 17:48:06 [main] DEBUG c.c.springmall.SpringMallApplication - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-13 17:48:06 [main] INFO  c.c.springmall.SpringMallApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-13 17:48:08 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-13 17:48:08 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 88 ms. Found 4 JPA repository interfaces.
2025-06-13 17:48:09 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-13 17:48:09 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-13 17:48:09 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-13 17:48:10 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-13 17:48:10 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3172 ms
2025-06-13 17:48:10 [main] DEBUG c.c.s.jwt.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-13 17:48:10 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-13 17:48:10 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@21090c88
2025-06-13 17:48:10 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-13 17:48:10 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-13 17:48:11 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.15.Final
2025-06-13 17:48:11 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-13 17:48:11 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-13 17:48:11 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0.22
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-13 17:48:13 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-13 17:48:13 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 17:48:13 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-13 17:48:13 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-13 17:48:13 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name myUserDetailsService
2025-06-13 17:48:14 [main] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-13 17:48:16 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-13 17:48:16 [main] INFO  c.c.springmall.SpringMallApplication - Started SpringMallApplication in 9.864 seconds (process running for 10.701)
2025-06-13 17:48:16 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-13 17:48:16 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-13 17:48:16 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-13 17:48:37 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-06-13 17:48:37 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-06-13 17:48:37 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 17:48:37 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-13 17:48:37 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-13 17:48:49 [main] INFO  c.c.springmall.SpringMallApplication - Starting SpringMallApplication using Java 17.0.15 with PID 8872 (C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall\target\classes started by user1 in C:\Users\user1\Desktop\Spring Boot\spring-mall\spring-mall)
2025-06-13 17:48:49 [main] DEBUG c.c.springmall.SpringMallApplication - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-13 17:48:49 [main] INFO  c.c.springmall.SpringMallApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-13 17:48:50 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-13 17:48:50 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 85 ms. Found 4 JPA repository interfaces.
2025-06-13 17:48:51 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-13 17:48:51 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-13 17:48:51 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-13 17:48:51 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-13 17:48:51 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2603 ms
2025-06-13 17:48:51 [main] DEBUG c.c.s.jwt.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-13 17:48:52 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-13 17:48:52 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6723cce7
2025-06-13 17:48:52 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-13 17:48:52 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-13 17:48:52 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.15.Final
2025-06-13 17:48:52 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-13 17:48:53 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-13 17:48:53 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0.22
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-13 17:48:54 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-13 17:48:54 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-13 17:48:54 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-13 17:48:55 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-13 17:48:55 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name myUserDetailsService
2025-06-13 17:48:56 [main] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page template: index
2025-06-13 17:48:57 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-13 17:48:57 [main] INFO  c.c.springmall.SpringMallApplication - Started SpringMallApplication in 8.915 seconds (process running for 9.772)
2025-06-13 17:48:59 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-13 17:48:59 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-13 17:48:59 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-13 17:49:00 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 461 ms
2025-06-13 17:50:09 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:50:09 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:50:09 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.findByEmail() 返回值: com.chenhao.springmall.model.Member@2e273fff 執行時間: 248ms
2025-06-13 17:50:09 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@2e273fff 執行時間: 250ms
2025-06-13 17:50:09 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:50:09 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy148.findRolesByMemberId() 參數: [1]
2025-06-13 17:50:09 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy148.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@4840097a] 執行時間: 152ms
2025-06-13 17:50:09 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@4840097a] 執行時間: 153ms
2025-06-13 17:50:09 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProduct() 參數: [1]
2025-06-13 17:50:09 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProductById() 參數: [1]
2025-06-13 17:50:09 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy151.findById() 參數: [1]
2025-06-13 17:50:09 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy151.findById() 返回值: Optional[com.chenhao.springmall.model.Product@3a82df0f] 執行時間: 30ms
2025-06-13 17:50:09 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProductById() 返回值: com.chenhao.springmall.model.Product@3a82df0f 執行時間: 36ms
2025-06-13 17:50:09 [http-nio-8080-exec-9] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProduct() 返回值: <200 OK OK,com.chenhao.springmall.model.Product@3a82df0f,[]> 執行時間: 38ms
2025-06-13 17:50:25 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:50:25 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:50:25 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.findByEmail() 返回值: com.chenhao.springmall.model.Member@16717b13 執行時間: 6ms
2025-06-13 17:50:25 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@16717b13 執行時間: 6ms
2025-06-13 17:50:25 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:50:25 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy148.findRolesByMemberId() 參數: [1]
2025-06-13 17:50:25 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy148.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@4beeef7f] 執行時間: 2ms
2025-06-13 17:50:25 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@4beeef7f] 執行時間: 3ms
2025-06-13 17:50:25 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductController.getProducts() 參數: [null, null, 0, 12, UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=test1@com.tw, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_ADMIN]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=null], Granted Authorities=[ROLE_ADMIN]]]
2025-06-13 17:50:25 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: ProductServiceImpl.getProducts() 參數: [com.chenhao.springmall.dto.ProductQueryParams@3431a56f, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:50:25 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy151.findAll() 參數: [com.chenhao.springmall.service.impl.ProductServiceImpl$$Lambda$2189/0x000001f001ce3aa8@64ef32c6, Page request [number: 0, size 12, sort: UNSORTED]]
2025-06-13 17:50:25 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy151.findAll() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 32ms
2025-06-13 17:50:25 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductServiceImpl.getProducts() 返回值: Page 1 of 5 containing com.chenhao.springmall.model.Product instances 執行時間: 35ms
2025-06-13 17:50:25 [http-nio-8080-exec-10] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: ProductController.getProducts() 返回值: <200 OK OK,{totalItems=52, totalPages=5, currentPage=0, products=[com.chenhao.springmall.model.Product@71ce68ee, com.chenhao.springmall.model.Product@150a73a8, com.chenhao.springmall.model.Product@14f52032, com.chenhao.springmall.model.Product@11a76a, com.chenhao.springmall.model.Product@21a369e, com.chenhao.springmall.model.Product@44cb8246, com.chenhao.springmall.model.Product@7982de5d, com.chenhao.springmall.model.Product@74250cf0, com.chenhao.springmall.model.Product@27d87a2c, com.chenhao.springmall.model.Product@3f990523, com.chenhao.springmall.model.Product@508644bb, com.chenhao.springmall.model.Product@c1880d7]},[]> 執行時間: 36ms
2025-06-13 17:50:48 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getMemberByEmail() 參數: [test1@com.tw]
2025-06-13 17:50:48 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy144.findByEmail() 參數: [test1@com.tw]
2025-06-13 17:50:48 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy144.findByEmail() 返回值: com.chenhao.springmall.model.Member@366a9d56 執行時間: 6ms
2025-06-13 17:50:48 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getMemberByEmail() 返回值: com.chenhao.springmall.model.Member@366a9d56 執行時間: 6ms
2025-06-13 17:50:48 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: MemberServiceImpl.getRolesByMemberId() 參數: [1]
2025-06-13 17:50:48 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: $Proxy148.findRolesByMemberId() 參數: [1]
2025-06-13 17:50:48 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: $Proxy148.findRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@656772b] 執行時間: 2ms
2025-06-13 17:50:48 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: MemberServiceImpl.getRolesByMemberId() 返回值: [com.chenhao.springmall.model.Role@656772b] 執行時間: 2ms
2025-06-13 17:50:48 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 進入方法: AuthController.hello() 參數: []
2025-06-13 17:50:48 [http-nio-8080-exec-3] INFO  c.c.springmall.aspect.LoggingAspect - 離開方法: AuthController.hello() 返回值: JWT OK! 執行時間: 0ms
